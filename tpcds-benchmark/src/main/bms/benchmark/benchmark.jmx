<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Aster/Hadoop Benchmark" enabled="true">
      <stringProp name="TestPlan.comments">Subject areas: Twitter sentiment analysis (SA), weblogs (WL), wikipedia (WP)</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BMS_TOKEN_EXIT_OK" elementType="Argument">
            <stringProp name="Argument.name">BMS_TOKEN_EXIT_OK</stringProp>
            <stringProp name="Argument.value">@@@OK@@@</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="**** BEFORE YOU TEST: README ****" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">/*
----------------------------
README
----------------------------

1. When defining query variables, ensure correct use of shell escapes. This is key for Hive parameter references like ${hiveconf:xyz}, which must be escaped as \${hiveconf:xyz} to keep the remote shell from resolving them as shell variables before passing them into Hive

2. Inside the UDV set &apos;Cluster&apos; under the test plan root, ensure variable CLUSTER_NODE_COUNT is set to the number of nodes in the cluster and that CLUSTER_NODEn (where n is a sequential integer from 1 to CLUSTER_NODE_COUNT) include the host name or IP address of every node in the cluster (if you use DNS names instead of numeric addresses, you must ensure that JMeter can properly resolve host names)

4. When using SSH samplers, e.g. to run Hadoop commands, ensure stderr is redirected to stdout so error messages are captured. For example:
# some_command arg1 arg2 2&gt;&amp;1. For convenience, the global UDV ${CL_STDERR_REDIR} is defined 

failure to do this will result in error messages being lost and not captured in the SSH sampler output. The variable ${CL_STDERR_REDIR} is defined as &apos;2&gt;&amp;1&apos; in the main test plan and should be used at the end of all SSH commands unless ignoring error output is desired.

5. Use fully qualified paths for executables referenced in SSH samplers whenever possible. Relying on shell configuration to resolve relative paths or aliases often results in runtime errors. Executable names should be defined via UDVs using fully qualified names in the test plan. E.g. define ${HADOOP_EXEC} as &apos;/usr/lib/hadoop/bin/hadoop&apos; and use the variable name in SSH sampler commands, e.g. ${HADOOP_EXEC} fs -rmr ${WL_JOB_OUT_DIR} ${CL_STDERR_REDIR}

*/

</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="**** README (Aster targets) ****" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">/*
--------------------------------------------------------
README FOR ASTER TARGETS
--------------------------------------------------------

*****
***** whitelist random()!
***** 

*/</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="**** README (Hadoop targets) ****" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">/*
--------------------------------------------------------
README FOR HADOOP TARGETS
--------------------------------------------------------

*/</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="TODO" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">/*

- Link ADW python nPath reducer (R09)
- In Aster eval_classifier, storage layout is mentioned, but not compression level...
- Test workflows
   - Main ESG suite
       - Sequential load
       - Sequential, single-threaded (SA,WL,WP,ADW)
   - Separate load/parse stages in WP/ADW -- normalize dimensions for load stages.
- Remove compression parms for map-only Hive jobs (e.g. S17)
- Stable test environment VMs (ESG long lease?)
- Statistics
    - Add data quality (source file, load performance, error/reject codes and rates) and lineage (original capture, ETL date) info to repository
    - Add data quality indicators for reports
        - perf_test completeness
        - stats missing/low quality - define thresholds and metrics
- Remove jmeter version from path ($BENCHMARK_PATH/apache-jmeter-2.7 --&gt; $BENCHMARK_PATH/apache-jmeter) -- refactor in JMX and ETL client
- Port gnip_load.sh
- Port gnip_parse.sh
- Migrate wikipedia load
- Add support for EXEC_CHECK_ROW_COUNTS
- Add sampler for cluster node specs (basic env/du/df to terminal, need dmesg and ?
    - ETL
    - Dimensional
        - Normalize:
            - Target (platform, node info, OS/SW, HW/dmesg, resources node/cluster level)
            - Test (seq/comb, user count, platform, load/query, comp/uncomp, optimizations)

    - Reporting
- Excel interface, other interfaces? rrdtool, ganglia

ASTER:
-----------

// TODO: echo random &gt;&gt; /home/beehive/config/additionalWhitelistFunctions
// Code review, complete runs
.
*/</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Output / Logging" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="OUTPUT_FILENAME_STEM" elementType="Argument">
            <stringProp name="Argument.name">OUTPUT_FILENAME_STEM</stringProp>
            <stringProp name="Argument.value">${BENCHMARK_OUTPUT_PATH}/${__TestPlanName}_${TESTSTART.MS}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="# SANDBOX" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1355812644000</longProp>
        <longProp name="ThreadGroup.end_time">1355812644000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.samplers.SampleResult;

SampleResult s;
for (int i=0; i&lt;5;i++) {
    s = SampleResult.createTestSample((long)100);
    s.setResponseData(&quot;GEB: &quot; + i);
    s.setResponseOK();
   //log.info(&quot;GEB: &quot; + i);
}
    s.setResponseData(&quot;XEB: &quot; + i);
    s.setResponseOK();

    s.setResponseData(&quot;XEB: &quot; + i);
    s.setResponseOK();
return new Integer[4];</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="e2" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">idem</stringProp>
            <stringProp name="RegexExtractor.regex">GEB: ([0-9]+)</stringProp>
            <stringProp name="RegexExtractor.template">@$1$@</stringProp>
            <stringProp name="RegexExtractor.default">?</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">idem</stringProp>
          <stringProp name="ForeachController.returnVal">eOut</stringProp>
          <boolProp name="ForeachController.useSeparator">false</boolProp>
        </ForeachController>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="e3" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">log.info(&quot;=========== :001):\n&quot; + sampleResult.getResponseDataAsString());
log.info(&quot;=========== 002)&quot; + vars.get(&quot;idem1&quot;));</stringProp>
        </BeanShellListener>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="e4" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;====&quot; + SampleResult.getResponseDataAsString());</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="&gt;&gt;&gt; EXIT SANDBOX (Stop threads)" enabled="true">
          <intProp name="ActionProcessor.action">2</intProp>
          <intProp name="ActionProcessor.target">2</intProp>
          <stringProp name="ActionProcessor.duration"></stringProp>
        </TestAction>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="STOP" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;&gt;&gt;&gt; STOPPING ENGINE&quot;);
org.apache.jmeter.engine.StandardJMeterEngine.stopEngine();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler debug" enabled="true">
          <boolProp name="SystemSampler.checkReturnCode">true</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">find</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${__P(BENCHMARK_PATH)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value"> -name \*.sh </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">-exec </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">chmod 755 {} </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">\;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory"></stringProp>
          <longProp name="SystemSampler.timeout">1000</longProp>
        </SystemSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Utilities" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1375460688000</longProp>
        <longProp name="ThreadGroup.end_time">1375460688000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Export variables" enabled="false">
          <stringProp name="TestPlan.comments">Export variables to external files</stringProp>
          <stringProp name="BeanShellSampler.query">import java.util.regex.*;

public static void writeStringToFile(String stringToWrite, String fileToWrite) {
    try {
        FileWriter file = new FileWriter(fileToWrite);
        BufferedWriter out = new BufferedWriter(file);
        out.write(stringToWrite);
        out.close();
        file.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
}

try {
    final String REGEX=&quot;ASTER_.*QL.*&quot;;
    Pattern pattern = Pattern.compile(REGEX);

    // Create output path if it doesn&apos;t exist
    String path = System.getProperty(&quot;user.home&quot;) + &quot;/Desktop/esg_benchmark_query_export&quot;;
    File pathFile = new File(path);
    if (pathFile.exists()) {
        log.warn(&quot;Export path &apos;&quot; + pathFile + &quot;&apos; already exists&quot;);
    } else {
        if (pathFile.mkdirs()) {
            log.info(&quot;Path folder &apos;&quot; + pathFile + &quot;&apos; created&quot;);
        } else {
            log.error(&quot;Unable to create path folder &apos;&quot; + pathFile + &quot;&apos; created&quot;);
        }
    }
 
    for (var : vars.getIterator()) {
        String varString = var.toString();
        int eqIndex = varString.indexOf(&quot;=&quot;);
        String varName = varString.substring(0,eqIndex);
        String varValue = varString.substring(eqIndex + 1);
        Matcher matcher = pattern.matcher(varName);
        if (matcher.find()) {
            String fileName = pathFile + &quot;/&quot; + varName + &quot;.sql&quot;;
            writeStringToFile(varValue, fileName);
            log.info(&quot;TEST@1@: &quot; + varName);
            log.info(&quot;TEST@2@: &quot; + varValue);
        }
    }
} catch (Exception e) {
    log.error(e);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Setup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1339700383000</longProp>
        <longProp name="ThreadGroup.end_time">1339700383000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="--- Log banner: Main start" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;==================================&quot;);
log.info(&quot;===  BMS Starting (r. 1.4.18)  ===&quot;);
log.info(&quot;==================================&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DEBUG: show variables" enabled="false">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

log.info(&quot;&gt; &gt; - - - - - - - - - - - - - - - V A R I A B L E S - - - - - - - - - - - - - - -&quot;);
for (var : vars.getIterator()) {
    log.info(&quot;var: &quot; + var);
}
log.info(&quot;&lt;  - - - - - - - - - - - - - - - V A R I A B L E S - - - - - - - - - - - - - - -&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DEBUG: show properties" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

log.info(&quot;&gt; &gt; - - - - - - - - - - - - - - - P R OP E R T I E S - - - - - - - - - - - - - - -&quot;);
for (prop : JMeterUtils.getJMeterProperties().propertyNames()) {
    log.info(&quot;prop: &quot; + prop + &quot;=&quot; + JMeterUtils.getJMeterProperties().getProperty(prop));
}
log.info(&quot;&lt;  - - - - - - - - - - - - - - - P R OP E R T I E S - - - - - - - - - - - - - - -&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Log JMeter system variables" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

stamp(string) {
	return &quot;(BMS) &quot; + string;	
}

log.info(&quot;JMeter bin directory: &quot; + JMeterUtils.getJMeterBinDir());
log.info(&quot;JMeter home directory: &quot; + JMeterUtils.getJMeterHome());
log.info(&quot;JMeter version: &quot; + JMeterUtils.getJMeterVersion());
log.info(&quot;Local host name: &quot; + JMeterUtils.getLocalHostFullName());
log.info(&quot;Local host IP address: &quot; + JMeterUtils.getLocalHostIP());
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DEBUG" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DEBUG: show variables" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

log.info(&quot;&gt; &gt; - - - - - - - - - - - - - - - V A R I A B L E S - - - - - - - - - - - - - - -&quot;);
for (var : vars.getIterator()) {
    log.info(&quot;var: &quot; + var);
}
log.info(&quot;&lt;  - - - - - - - - - - - - - - - V A R I A B L E S - - - - - - - - - - - - - - -&quot;);

log.info(&quot;&gt; &gt; - - - - - - - - - - - - - - - P R OP E R T I E S - - - - - - - - - - - - - - -&quot;);
for (prop : JMeterUtils.getJMeterProperties().propertyNames()) {
    log.info(&quot;prop: &quot; + prop + &quot;=&quot; + JMeterUtils.getJMeterProperties().getProperty(prop));
}
log.info(&quot;&lt;  - - - - - - - - - - - - - - - P R OP E R T I E S - - - - - - - - - - - - - - -&quot;);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell: show prev contents" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">log.info(&quot;@@@ prev: (respdata=&quot; + prev.getResponseDataAsString() + &quot;, message=&quot; + prev.getResponseMessage() + &quot;, sampledata=&quot; + prev.getSamplerData() + &quot;, respcode=&quot; + prev.getResponseCode()  + &quot;)&quot; );</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="Teardown" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1339700426000</longProp>
        <longProp name="ThreadGroup.end_time">1339700426000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Teardown suite (RUN_ID=${__P(BENCHMARK_RUN_ID)})" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(ctx.getCurrentSampler().getName());
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Exit on teardown?" enabled="true">
          <stringProp name="IfController.condition">${__P(EXEC_EXIT_ON_TEARDOWN)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="System.exit(0);" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(&quot;Teardown complete. Calling System.exit&quot;);
System.exit(0);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="EXIT" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;================================================================================&quot;);
log.info(&quot;===  BMS Exiting ===&quot;);
log.info(&quot;================================================================================&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion: response is empty" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="2950">^$</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">6</intProp>
          <stringProp name="Assertion.scope">all</stringProp>
        </ResponseAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="xSD (Stats debug)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(BMS_@SD_LOOP_COUNT)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1395783453000</longProp>
        <longProp name="ThreadGroup.end_time">1395783453000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Teradata" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_TERADATA)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="xSD00:test" enabled="true">
            <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
            <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
            <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
            <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
            <stringProp name="command">whoami; date; ls</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="xSD00:Load" enabled="true">
              <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
              <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
              <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
              <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
              <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/debug/stress.sh 5</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="xSD01:Query 1" enabled="true">
              <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
              <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
              <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
              <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
              <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/debug/stress.sh 10</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="xSD02:Query 2" enabled="true">
              <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
              <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
              <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
              <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
              <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/debug/stress.sh 12</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="xSD03:Query 3" enabled="true">
              <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
              <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
              <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
              <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
              <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/debug/stress.sh 14</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="xSD04:Query 4" enabled="true">
              <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
              <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
              <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
              <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
              <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/debug/stress.sh 16</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="xSD05:Query 5" enabled="true">
              <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
              <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
              <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
              <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
              <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/debug/stress.sh 3</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="@SK (Smoke test)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1318848428000</longProp>
        <longProp name="ThreadGroup.end_time">1318848428000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Test simple HDFS" enabled="true">
          <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
          <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
          <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
          <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
          <stringProp name="command">hadoop fs -ls /</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Test simple HDFS" enabled="true">
          <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
          <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
          <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
          <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
          <stringProp name="command">sleep 4</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SA (twitter)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(BMS_SA_LOOP_COUNT)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(BMS_USER_COUNT)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__(BMS_RAMP_UP_SEC)}</stringProp>
        <longProp name="ThreadGroup.start_time">1318848428000</longProp>
        <longProp name="ThreadGroup.end_time">1318848428000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Aster" enabled="false">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_ASTER)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Thread Group: Aster SA, thread ${__threadNum}" enabled="true">
            <stringProp name="BeanShellSampler.query">log.info(ctx.getCurrentSampler().getName());
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SA UDVs" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_ACT_SA_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ACT_SA_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${ASTER_ACT_EXEC} -d ${ASTER_DBNAME_SA} -U ${ASTER_ACT_UID} -w ${ASTER_ACT_PWD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SA Aster Queries" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_SA_SQL_S09" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S09</stringProp>
                <stringProp name="Argument.value">-- 1.    Number of activities (e.g. tweets)
-- a.    Aggregate by: topic, polarity (classifier outputs)
-- b.    Filter by: date range
-- c.    Order by: topic, polarity
            
SELECT 
	topic, polarity, count(*) frequency
FROM activity_stream 
WHERE  CAST(posted_time AS DATE) 
BETWEEN &apos;${PARM_SA_START_DATE}&apos; AND &apos;${PARM_SA_END_DATE}&apos;
GROUP BY 1,2
ORDER BY 3 DESC
LIMIT 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S10" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S10</stringProp>
                <stringProp name="Argument.value">--2.    Find most frequently mentioned users
--a.    Aggregate by: date, topic/polarity (classifier output)
--b.    Filter by: date_range, text match (keyword or LIKE clause), klout_score, followers, friends

SELECT  posted_date, topic, polarity, user_mention, count(*) frequency
FROM (
    SELECT CAST(posted_time AS DATE) AS posted_date, topic, polarity, REGEXP_REPLACE(REGEXP_SPLIT_TO_TABLE(doc_txt,&apos;[[:space:]]&apos;),&apos;[^[:alnum:]_@]&apos;,&apos;&apos;,&apos;g&apos;) user_mention
    FROM activity_stream
    WHERE
        CAST(posted_time AS DATE) BETWEEN &apos;${PARM_SA_START_DATE}&apos; AND &apos;${PARM_SA_END_DATE}&apos;
    AND (
        doc_txt ~* &apos;[^[:alnum:]]aster data[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]hadoop[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]teradata[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]netezza[^[:alnum:]]&apos;
    )
    AND klout_score &gt; 30 AND follower_count &gt; 100 AND friends_count &gt; 100
) t0
WHERE user_mention ~ &apos;^@.*&apos;
GROUP BY posted_date, topic, polarity, user_mention
ORDER BY count(*) DESC
LIMIT 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S11" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S11</stringProp>
                <stringProp name="Argument.value">--3.  Find most frequently mentioned keywords 
--a.  Aggregate by: hour of day, topic/polarity (classifier output) 
--b.  Filter by: date_range, klout_score, followers, friends, text match (other keywords or LIKE clause)

SELECT  posted_date, topic, polarity, keyword, COUNT(*) frequency 
FROM  (    
SELECT CAST(posted_time AS DATE) AS posted_date, topic, polarity,
        REGEXP_REPLACE(REGEXP_SPLIT_TO_TABLE(doc_txt,&apos;[[:space:]]&apos;),&apos;[^[:alnum:]_-]&apos;,&apos;&apos;,&apos;g&apos;) keyword    
FROM  activity_stream   
WHERE      CAST(posted_time AS DATE) BETWEEN &apos;${PARM_SA_START_DATE}&apos; 
    AND &apos;${PARM_SA_END_DATE}&apos;  
    AND (
        doc_txt ~* &apos;[^[:alnum:]]aster data[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]hadoop[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]teradata[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]netezza[^[:alnum:]]&apos;
     )   
    AND klout_score &gt; 30 
    AND follower_count &gt; 100 
    AND friends_count &gt; 100 ) t0 
WHERE keyword ~ &apos;^[[:alnum:]_-]*$&apos; 
    AND UPPER(keyword) NOT IN (
SELECT UPPER(word) 
FROM  STOPWORDS) 
GROUP  BY posted_date, topic, polarity, keyword 
ORDER  BY COUNT(*) DESC LIMIT 25; </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S12" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S12</stringProp>
                <stringProp name="Argument.value">--4.    Find most commonly referenced URLs/websites/domains
--a.    Aggregate by: hour of day, topic (classifier output)
--b.    Filter by: klout_score, followers, friends, text match (other keywords or LIKE clause)
SELECT  posted_date, topic, polarity, link, count(*) frequency
FROM (
    SELECT CAST(posted_time AS DATE) AS posted_date, topic, polarity, REGEXP_SPLIT_TO_TABLE(doc_txt,&apos;[[:space:]]&apos;) link
    FROM activity_stream
    WHERE
        CAST(posted_time AS DATE) BETWEEN &apos;${PARM_SA_START_DATE}&apos; AND &apos;${PARM_SA_END_DATE}&apos;
    AND (
        doc_txt ~* &apos;[^[:alnum:]]aster data[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]hadoop[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]teradata[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]netezza[^[:alnum:]]&apos;
    )
    AND klout_score &gt; 30 AND follower_count &gt; 100 AND friends_count &gt; 100
) t0
WHERE link ~ &apos;http://&apos;
GROUP BY posted_date, topic, polarity, link
ORDER BY count(*) DESC
LIMIT 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S13-1" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S13-1</stringProp>
                <stringProp name="Argument.value">DROP VIEW IF EXISTS token_affinity;

CREATE VIEW token_affinity AS
SELECT  doc_id, posted_date, topic, polarity, keyword
FROM (
    SELECT CAST(posted_time AS DATE) AS posted_date, doc_id, topic, polarity, REGEXP_REPLACE(REGEXP_SPLIT_TO_TABLE(doc_txt,&apos;[[:space:]]&apos;),&apos;[^[:alnum:]_-]&apos;,&apos;&apos;) keyword
    FROM activity_stream
    WHERE
        CAST(posted_time AS DATE) BETWEEN &apos;${PARM_SA_START_DATE}&apos; AND &apos;${PARM_SA_END_DATE}&apos;
    AND (
        doc_txt ~* &apos;[^[:alnum:]]aster data[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]hadoop[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]teradata[^[:alnum:]]&apos; 
        OR 
        doc_txt ~* &apos;[^[:alnum:]]netezza[^[:alnum:]]&apos;
    )
    AND klout_score &gt; 30 AND follower_count &gt; 100 AND friends_count &gt; 100
) t0
WHERE keyword ~ &apos;^[[:alnum:]_-]*$&apos; AND keyword ~ &apos;[[:alnum:]]{1,}&apos; 
AND 
UPPER(keyword) NOT IN (SELECT UPPER(word) FROM stopwords)
;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S13-2" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S13-2</stringProp>
                <stringProp name="Argument.value">--5.    Token affinity analysis
--a.    Find token pairs with highest above-chance co-occurrence (restrict to semantically relevant tokens, filter out stop words, e.g. &apos;I&apos;, &apos;the&apos;, &apos;this&apos;)
--b.    Aggregate by: topic/polarity (classifier output)
--c.    Filter by: klout_score, followers, friends, text match (other keywords or LIKE clause)

SELECT t0.keyword, t1.keyword, COUNT(*) AS frequency
FROM token_affinity t0
INNER JOIN token_affinity t1
ON t0.doc_id = t1.doc_id
WHERE t0.keyword &lt; t1.keyword
GROUP BY 1,2
HAVING COUNT(*)&gt;1
ORDER BY 3 DESC
LIMIT 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S15" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S15</stringProp>
                <stringProp name="Argument.value">-- HISTOGRAM h=(distinct users), bin=(tweet count)

SELECT tweet_bin, count(*) user_count
FROM (
    SELECT user_id, COUNT(*) tweet_count, ROUND(COUNT(*)/10,0) * 10 tweet_bin
    FROM activity_stream
    GROUP BY user_id
) t0
GROUP BY tweet_bin
ORDER BY tweet_bin
LIMIT 25;

</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S16" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S16</stringProp>
                <stringProp name="Argument.value">--:::::::::::::: --twitterLocalAgg.sql --:::::::::::::: 
select count(*) from (
select count(*),doc_id  from activity_stream group by doc_id
) t0;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S17" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S17</stringProp>
                <stringProp name="Argument.value">--::::::::::::::
--twitterLookup.sql
--::::::::::::::
--select * from activity_stream
--  where doc_id in (178204616368996353,
--                   178204621574111234,
--                   178204629274861569);

-- NEW VERSION: performance rewrite by Sushil
select * from activity_stream where doc_id=178204629274861569 union all
select * from activity_stream where doc_id=178204616368996353 union all
select * from activity_stream where doc_id=178204621574111234;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S18" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S18</stringProp>
                <stringProp name="Argument.value">--::::::::::::::
--twitterHaving.sql
--::::::::::::::
SELECT
doc_txt_reg ~ &apos;@empos&apos; positive,
doc_txt_reg ~ &apos;@emneg&apos; negative,
doc_txt_reg ~ &apos;@emhum&apos; humor , COUNT(*)
FROM activity_stream
GROUP BY 1,2,3
HAVING count(*) &gt; 100
ORDER BY 1,2,3;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S19" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S19</stringProp>
                <stringProp name="Argument.value">-- Find most active users including the count for re-tweets
SELECT user_id, user_name, COUNT(*) AS total
FROM activity_stream
GROUP BY user_id, user_name
ORDER BY total desc limit 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S20" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S20</stringProp>
                <stringProp name="Argument.value">-- 3.   Find most active users without counting retweets
SELECT user_id, user_name, COUNT(*) AS total
FROM activity_stream
WHERE is_retweet = &apos;false&apos;
GROUP BY user_id, user_name
ORDER BY total desc limit 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S21" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S21</stringProp>
                <stringProp name="Argument.value">-- users with highest hadoop count with their aster tweet count for users who tweet about both
SELECT t1.user_id,t1.user_name, t1.user_location, t1.hadoop_total,
        t2.aster_total 
FROM  (
SELECT user_id,user_name, user_location, COUNT(*) AS hadoop_total 
FROM  activity_stream 
WHERE doc_txt LIKE &apos;%hadoop%&apos; 
GROUP  BY user_id,user_name,user_location) t1, (
SELECT user_id,user_name,user_location,COUNT(*) AS aster_total 
FROM  activity_stream 
WHERE doc_txt LIKE &apos;%asterdata%&apos; 
GROUP  BY user_id,user_name, user_location) t2 
WHERE t1.user_id = t2.user_id 
ORDER  BY  t1.hadoop_total DESC
LIMIT 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S22" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S22</stringProp>
                <stringProp name="Argument.value">-- Find most active users including the count for re-tweets who has klout_score&gt;95 and follower_count&gt;500 ?
SELECT user_id,user_name, COUNT(*) AS total 
FROM  activity_stream 
WHERE klout_score&gt;95 
    AND follower_count &gt; 500 
GROUP  BY  user_id,user_name 
ORDER  BY total DESC LIMIT 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S23" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S23</stringProp>
                <stringProp name="Argument.value">-- most active users without counting retweets with klout_score&gt;95
SELECT user_id,user_name, COUNT(*) AS total 
FROM  activity_stream 
WHERE is_retweet=&apos;false&apos; 
    AND klout_score&gt;95 
GROUP  BY  user_id,user_name 
ORDER  BY total DESC LIMIT 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S24" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S24</stringProp>
                <stringProp name="Argument.value">--Find users with highest number of re-tweets ?  ( Would be helpful in ignoring them in some analysis )
SELECT user_id,user_name, COUNT(*) AS total 
FROM   activity_stream 
WHERE is_retweet=&apos;true&apos; 
GROUP   BY  user_id,user_name 
ORDER   BY total DESC LIMIT 25
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S25" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S25</stringProp>
                <stringProp name="Argument.value">-- Find the user tweting about hadoop and their info for users with max followers?
SELECT user_id,user_name,user_location,MAX(friends_count) AS max_cnt 
FROM  activity_stream 
WHERE doc_txt LIKE &apos;%hadoop%&apos; 
GROUP  BY  user_id,user_name,user_location 
ORDER  BY max_cnt DESC LIMIT 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S26" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S26</stringProp>
                <stringProp name="Argument.value">-- Find info about latest 20 tweets from user BarackObama and follower count.
SELECT  user_id, user_name, screen_name, follower_count,user_location,
        klout_score,posted_time 
FROM  activity_stream 
WHERE user_name =&apos;BarackObama&apos; 
ORDER  BY posted_time DESC LIMIT 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S27" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S27</stringProp>
                <stringProp name="Argument.value">--Find location from where most users tweeted about  &apos;oscar&apos; over a period of time  ?
SELECT user_location, COUNT(*) AS total 
FROM  activity_stream 
WHERE doc_txt LIKE &apos;%oscar%&apos; 
    AND user_location != &apos;&apos; 
GROUP  BY user_location 
ORDER  BY total DESC LIMIT 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S28" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S28</stringProp>
                <stringProp name="Argument.value">-- show user_location for max_tweets by tweet count over entire period
SELECT user_location,COUNT(*) AS total 
FROM  activity_stream 
WHERE user_location !=&apos;&apos; 
GROUP  BY user_location 
ORDER  BY total DESC LIMIT 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S29" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S29</stringProp>
                <stringProp name="Argument.value">-- show the number of original tweets on Syria originating in Syria
SELECT COUNT(*) 
FROM  activity_stream 
WHERE is_retweet = &apos;false&apos;  
    AND doc_txt LIKE &apos;%syria%&apos; 
    AND user_location LIKE &apos;%syria%&apos;;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S30" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S30</stringProp>
                <stringProp name="Argument.value">-- Find the user and their info for users with max followers ?
SELECT user_id,user_name,user_location,MAX(follower_count) AS max_cnt 
FROM  activity_stream 
GROUP  BY  user_id,user_name,user_location 
ORDER  BY max_cnt DESC LIMIT 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S31" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S31</stringProp>
                <stringProp name="Argument.value">-- most active user on the specific day of the year on 4/01/2012
SELECT user_id,user_name,user_location,COUNT(*) AS total 
FROM  activity_stream 
WHERE EXTRACT(MONTH FROM  posted_time)=4 
    AND EXTRACT(DAY FROM  posted_time)=1 
    AND EXTRACT(YEAR FROM  posted_time)=2012 
GROUP  BY user_id,user_name,user_location
 ORDER BY total LIMIT 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_S32" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_S32</stringProp>
                <stringProp name="Argument.value">-- find most re-tweeted tweet (This is mostly ignoring multiple levels so results might be wrong here)
-- select t4.doc_id, t4.user_name, t4.user_location, t4.doc_txt, t4.klout_score from activity_stream t4, (select t1.doc_id, count(*) as total from activity_stream t1, activity_stream t2 where t1.doc_id=t2.in_reply_doc_id group by t1.doc_id order by total desc limit 20) t3 where t4.doc_id = t3.doc_id order by t3.total desc;

-- NEW VERSION: performance rewrite by Sushil
SELECT t4.doc_id, t4.user_name, t4.user_location, t4.doc_txt, t4.klout_score 
FROM  activity_stream t4,
(
SELECT t1.in_reply_doc_id AS doc_id, COUNT(*) AS total 
FROM  activity_stream t1 
WHERE t1.in_reply_doc_id &gt; 0 
GROUP  BY t1.in_reply_doc_id) t3
WHERE t4.doc_id = t3.doc_id 
ORDER  BY t3.total DESC LIMIT 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SA DDL" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_SA_SQL_CREATE_DB" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_CREATE_DB</stringProp>
                <stringProp name="Argument.value">CREATE DATABASE ${ASTER_DBNAME_SA} ENCODING = &apos;UTF8&apos; ; </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_CREATE_TABLES" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_CREATE_TABLES</stringProp>
                <stringProp name="Argument.value">DROP TABLE IF EXISTS  activity_stream CASCADE;
CREATE TABLE activity_stream (
    doc_id bigint,
    posted_time timestamp,
    doc_txt character varying, -- original payload
    doc_txt_reg character varying, -- regularized payload
    is_retweet character varying,
    user_id bigint,
    user_name character varying,
    screen_name character varying,
    follower_count integer,
    friends_count integer,
    user_location character varying,
    in_reply_doc_id bigint,
    language character varying,
    klout_score integer,
    polarity character(1),
    topic character varying
) DISTRIBUTE BY HASH (user_id)
${STORAGE_SA_LAYOUT}
${STORAGE_SA_COMPRESSION}
PARTITION BY RANGE(posted_time) (
    PARTITION activity_stream_pre20120301 (END &apos;2012-03-01&apos;),
    PARTITION activity_stream_20120302 (END &apos;2012-03-02&apos;),
    PARTITION activity_stream_20120303 (END &apos;2012-03-03&apos;),
    PARTITION activity_stream_20120304 (END &apos;2012-03-04&apos;),
    PARTITION activity_stream_20120305 (END &apos;2012-03-05&apos;),
    PARTITION activity_stream_20120306 (END &apos;2012-03-06&apos;),
    PARTITION activity_stream_20120307 (END &apos;2012-03-07&apos;),
    PARTITION activity_stream_20120308 (END &apos;2012-03-08&apos;),
    PARTITION activity_stream_20120309 (END &apos;2012-03-09&apos;),
    PARTITION activity_stream_20120310 (END &apos;2012-03-10&apos;),
    PARTITION activity_stream_20120311 (END &apos;2012-03-11&apos;),
    PARTITION activity_stream_20120312 (END &apos;2012-03-12&apos;),
    PARTITION activity_stream_20120313 (END &apos;2012-03-13&apos;),
    PARTITION activity_stream_20120314 (END &apos;2012-03-14&apos;),
    PARTITION activity_stream_20120315 (END &apos;2012-03-15&apos;),
    PARTITION activity_stream_20120316 (END &apos;2012-03-16&apos;),
    PARTITION activity_stream_20120317 (END &apos;2012-03-17&apos;),
    PARTITION activity_stream_20120318 (END &apos;2012-03-18&apos;),
    PARTITION activity_stream_20120319 (END &apos;2012-03-19&apos;),
    PARTITION activity_stream_20120320 (END &apos;2012-03-20&apos;),
    PARTITION activity_stream_20120321 (END &apos;2012-03-21&apos;),
    PARTITION activity_stream_20120322 (END &apos;2012-03-22&apos;),
    PARTITION activity_stream_20120323 (END &apos;2012-03-23&apos;),
    PARTITION activity_stream_20120324 (END &apos;2012-03-24&apos;),
    PARTITION activity_stream_20120325 (END &apos;2012-03-25&apos;),
    PARTITION activity_stream_20120326 (END &apos;2012-03-26&apos;),
    PARTITION activity_stream_20120327 (END &apos;2012-03-27&apos;),
    PARTITION activity_stream_20120328 (END &apos;2012-03-28&apos;),
    PARTITION activity_stream_20120329 (END &apos;2012-03-29&apos;),
    PARTITION activity_stream_20120330 (END &apos;2012-03-30&apos;),
    PARTITION activity_stream_20120331 (END &apos;2012-03-31&apos;),
    PARTITION activity_stream_20120401 (END &apos;2012-04-01&apos;),
    PARTITION activity_stream_20120402 (END &apos;2012-04-02&apos;),
    PARTITION activity_stream_20120403 (END &apos;2012-04-03&apos;),
    PARTITION activity_stream_20120404 (END &apos;2012-04-04&apos;),
    PARTITION activity_stream_20120405 (END &apos;2012-04-05&apos;),
    PARTITION activity_stream_20120406 (END &apos;2012-04-06&apos;),
    PARTITION activity_stream_20120407 (END &apos;2012-04-07&apos;),
    PARTITION activity_stream_20120408 (END &apos;2012-04-08&apos;),
    PARTITION activity_stream_20120409 (END &apos;2012-04-09&apos;),
    PARTITION activity_stream_20120410 (END &apos;2012-04-10&apos;),
    PARTITION activity_stream_20120411 (END &apos;2012-04-11&apos;),
    PARTITION activity_stream_20120412 (END &apos;2012-04-12&apos;),
    PARTITION activity_stream_20120413 (END &apos;2012-04-13&apos;),
    PARTITION activity_stream_20120414 (END &apos;2012-04-14&apos;),
    PARTITION activity_stream_20120415 (END &apos;2012-04-15&apos;),
    PARTITION activity_stream_20120416 (END &apos;2012-04-16&apos;),
    PARTITION activity_stream_20120417 (END &apos;2012-04-17&apos;),
    PARTITION activity_stream_20120418 (END &apos;2012-04-18&apos;),
    PARTITION activity_stream_20120419 (END &apos;2012-04-19&apos;),
    PARTITION activity_stream_20120420 (END &apos;2012-04-20&apos;),
    PARTITION activity_stream_20120421 (END &apos;2012-04-21&apos;),
    PARTITION activity_stream_20120422 (END &apos;2012-04-22&apos;),
    PARTITION activity_stream_20120423 (END &apos;2012-04-23&apos;),
    PARTITION activity_stream_20120424 (END &apos;2012-04-24&apos;),
    PARTITION activity_stream_20120425 (END &apos;2012-04-25&apos;),
    PARTITION activity_stream_20120426 (END &apos;2012-04-26&apos;),
    PARTITION activity_stream_20120427 (END &apos;2012-04-27&apos;),
    PARTITION activity_stream_20120428 (END &apos;2012-04-28&apos;),
    PARTITION activity_stream_20120429 (END &apos;2012-04-29&apos;),
    PARTITION activity_stream_20120430 (END &apos;2012-04-30&apos;),
    PARTITION activity_stream_post (END &apos;9999-12-31&apos;)
);

DROP TABLE IF EXISTS  stage_activity_stream;
CREATE TABLE stage_activity_stream (
    json_txt CHARACTER VARYING (20000)
) DISTRIBUTE BY HASH (json_txt);

DROP TABLE IF EXISTS gnip_errors;
CREATE FACT TABLE gnip_errors () 
INHERITS (nc_system.nc_errortable_part);

DROP TABLE IF EXISTS dmoz_rdf_class_train;
CREATE TABLE dmoz_rdf_class_train (
   topic_name VARCHAR,
   desc_txt VARCHAR
) DISTRIBUTE BY HASH (topic_name);
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_SA_SQL_INSTALL_FUNCTIONS" elementType="Argument">
                <stringProp name="Argument.name">ASTER_SA_SQL_INSTALL_FUNCTIONS</stringProp>
                <stringProp name="Argument.value">\remove classifier_train.zip;
\install ${BENCHMARK_PATH}/apps/twitter/aster/mr_functions/classifier_train.zip;
\remove classifier_evaluate.zip;
\install ${BENCHMARK_PATH}/apps/twitter/aster/mr_functions/classifier_evaluate.zip;
\remove documentParser.zip;
\install ${BENCHMARK_PATH}/apps/twitter/aster/mr_functions/documentParser.zip;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create DB (${ASTER_DBNAME_SA})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_CREATE_DB}&quot; | ${ASTER_ACT_EXEC} -e -d beehive -U ${ASTER_ACT_UID} -w ${ASTER_ACT_PWD} ${CL_STDERR_REDIR} | tee -a ${BENCHMARK_OUTPUT_PATH}/create.db.${ASTER_DBNAME_SA}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create tables (${ASTER_DBNAME_SA})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_CREATE_TABLES}&quot; | ${ASTER_ACT_SA_CL_PREFIX} -e ${CL_STDERR_REDIR} | tee -a ${BENCHMARK_OUTPUT_PATH}/create.tables.${ASTER_DBNAME_SA}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Install functions (${ASTER_DBNAME_SA})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_INSTALL_FUNCTIONS}&quot; | ${ASTER_ACT_SA_CL_PREFIX} -e ${CL_STDERR_REDIR} | tee -a ${BENCHMARK_OUTPUT_PATH}/install.functions.${ASTER_DBNAME_SA}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Stopwords (${ASTER_DBNAME_SA})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/twitter/aster/stopwords.sh ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/stopwords.${ASTER_DBNAME_SA}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SA Load UDVs" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="SA_TRAIN_TOPIC_CLASSIFIER" elementType="Argument">
                  <stringProp name="Argument.name">SA_TRAIN_TOPIC_CLASSIFIER</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Load files (${ASTER_DBNAME_SA})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/twitter/aster/load_files.sh ${ASTER_INPUT_FILE_DIR}/twitter ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/load_files.${ASTER_DBNAME_SA}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Parse (${ASTER_DBNAME_SA})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/twitter/aster/parse_content.sh ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/parse_content.${ASTER_DBNAME_SA}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Train topic classifier" enabled="true">
                <stringProp name="IfController.condition">${__P(BMS_SA_TRAIN_TOPIC_CLASSIFIER)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Load topic training set (${ASTER_DBNAME_SA})" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/twitter/aster/load_topic_training_set.sh ${ASTER_INPUT_FILE_DIR}/twitter ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/load_topic_training_set.${ASTER_DBNAME_SA}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Resample topic training set (${ASTER_DBNAME_SA})" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/twitter/aster/resample_topic_training_set.sh ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/resample_topic_training_set.${ASTER_DBNAME_SA}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Train topic classifier (${ASTER_DBNAME_SA})" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/twitter/aster/train_topic_classifier.sh ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/train_topic_classifier.${ASTER_DBNAME_SA}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Train polarity classifier (${ASTER_DBNAME_SA})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/twitter/aster/train_polarity_classifier.sh ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/train_polarity_classifier.${ASTER_DBNAME_SA}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Evaluate classifier (${ASTER_DBNAME_SA})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/twitter/aster/eval_classifier.sh &quot;${STORAGE_SA_LAYOUT}&quot; ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/eval_classifier.${ASTER_DBNAME_SA}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1702243900">${ASTER_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S09" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S09}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q1 # of activities by topic/polarity</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S10" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S10}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q2 most active users by date/topic/polarity</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S11" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S11}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q3 Most frequent keywords</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S12" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S12}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q4 Most common url/webs/domain</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S13" enabled="true">
                <boolProp name="TransactionController.parent">false</boolProp>
              </TransactionController>
              <hashTree>
                <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
                <hashTree>
                  <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S13-1" enabled="true">
                    <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                    <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                    <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                    <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                    <stringProp name="command">echo &quot;${ASTER_SA_SQL_S13-1}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                    <stringProp name="TestPlan.comments">Q5 Token affinity analysis</stringProp>
                  </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                  <hashTree/>
                </hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S13-2" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">echo &quot;${ASTER_SA_SQL_S13-2}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                  <stringProp name="TestPlan.comments">Q5 Token affinity analysis</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S15" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S15}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q7 Histogram (number of users binned by tweet count range)</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S16" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S16}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">QA1 Local Aggregate by doc_id</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S17" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S17}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">QA2 Look up documents by ID (3 IDs in IN clause)</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S18" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S18}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">QA3 Having clause with regular expression match GROUP BY</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S19" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S19}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">QJ1 Find most active users including retweets </stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S20" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S20}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">QJ3 Find most active users excluding retweets </stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S22" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S22}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">QJ5 Find most active users including re-tweets, klout_score&gt;95 AND follower_count&gt;501</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S23" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S23}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">QJ6 Most active users without counting retweets with klout_score&gt;96</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S24" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S24}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">QJ7 Find users with highest number of re-tweets</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S25" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S25}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q8 Find the user tweeting about Hadoop and their info for users with max followers</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S26" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S26}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q9 Find info about Obama&apos;s latest 20 tweets and follower count</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S27" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S27}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q10 Find location from where most users tweeted about  &apos;oscar&apos; over a period of time</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S28" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S28}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q11 Show user_location for max_tweets by tweet count over entire period</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S29" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S29}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q12 Show number of original tweets on Syria originating in Syria</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S30" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S30}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q13 Find the user and their info for users with max followers</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S31" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S31}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q14 Most active user on specific day of the year</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S32" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_SA_SQL_S32}&quot; | ${ASTER_ACT_SA_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q15 Find most re-tweeted tweet</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1702243900">${ASTER_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">0</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </SizeAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Hadoop" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_HADOOP)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SA Hive Parameters" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="HIVE_PARM_SA_START_DATE" elementType="Argument">
                <stringProp name="Argument.name">HIVE_PARM_SA_START_DATE</stringProp>
                <stringProp name="Argument.value">-hiveconf date_filter1=&quot;posted_dt&gt;=&apos;${PARM_SA_START_DATE}&apos;&quot;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_PARM_SA_END_DATE" elementType="Argument">
                <stringProp name="Argument.name">HIVE_PARM_SA_END_DATE</stringProp>
                <stringProp name="Argument.value">-hiveconf date_filter2=&quot;posted_dt&lt;=&apos;${PARM_SA_END_DATE}&apos;&quot;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_PARM_SA_KLOUT_SCORE" elementType="Argument">
                <stringProp name="Argument.name">HIVE_PARM_SA_KLOUT_SCORE</stringProp>
                <stringProp name="Argument.value">-hiveconf klout_filter=&quot;klout_score&gt;${PARM_SA_KLOUT_SCORE}&quot;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_PARM_SA_FRIENDS" elementType="Argument">
                <stringProp name="Argument.name">HIVE_PARM_SA_FRIENDS</stringProp>
                <stringProp name="Argument.value">-hiveconf friends_filter=&quot;friends_count&gt;${PARM_SA_FRIENDS}&quot;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_PARM_SA_FOLLOWERS" elementType="Argument">
                <stringProp name="Argument.name">HIVE_PARM_SA_FOLLOWERS</stringProp>
                <stringProp name="Argument.value">-hiveconf follower_filter=&quot;follower_count&gt;${PARM_SA_FOLLOWERS}&quot;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Load files" enabled="false">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/twitter/hadoop/gnip_load_all.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Parse" enabled="false">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/twitter/hadoop/gnip_parse.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Hive create activity stream staging table" enabled="false">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/twitter/hadoop/create_stream_staging.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S00:Prepare topic classifier" enabled="false"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Load topic training set" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/twitter/hadoop/load_topic_training_set.sh 2&gt;&amp;1</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Train topic classifier" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/twitter/hadoop/train_topic_classifier.sh 2&gt;&amp;1</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S00:Prepare polarity classifier" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Load polarity training set" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/twitter/hadoop/load_polarity_training_set.sh 2&gt;&amp;1</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00:Train polarity classifier" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/twitter/hadoop/train_polarity_classifier.sh 2&gt;&amp;1</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="S00: Evaluate classifiers" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00: Evaluate topic classifier" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/twitter/hadoop/eval_topic_classifier.sh 2&gt;&amp;1</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00: Evaluate polarity classifier" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/twitter/hadoop/eval_polarity_classifier.sh 2&gt;&amp;1</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00: Build target table" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/twitter/hadoop/build_target_table.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00: Build stopwords table" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/twitter/hadoop/build_stopwords_table.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Check exit status" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String samplerOutput = new String(data);
String samplerName = ctx.getCurrentSampler().getName();
if (!samplerOutput.contains(props.getProperty(&quot;BMS_TOKEN_EXIT_OK&quot;))) {
	log.error(&quot;Error detected in sampler &apos;&quot; + samplerName + &quot;&apos;: &quot; + samplerOutput);
	log.info(&quot;&gt;&gt;&gt; STOPPING ENGINE&quot;);
	org.apache.jmeter.engine.StandardJMeterEngine.stopEngine();
	props.setProperty(&quot;STOP_ENGINE&quot;,&quot;true&quot;);
}
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1064932443">${__P(BMS_TOKEN_EXIT_OK)}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="false">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S09" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q1}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="S10 (single-thread only)" enabled="true">
                  <stringProp name="IfController.condition">${__jexl(${__P(BMS_USER_COUNT)} == 1)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S10" enabled="true">
                    <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                    <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                    <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                    <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                    <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q2}&quot; ${CL_STDERR_REDIR}</stringProp>
                  </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="S11 (single-thread only)" enabled="true">
                  <stringProp name="IfController.condition">${__jexl(${__P(BMS_USER_COUNT)} == 1)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S11" enabled="true">
                    <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                    <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                    <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                    <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                    <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q3}&quot; ${CL_STDERR_REDIR}</stringProp>
                  </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="S12 (single-thread only)" enabled="true">
                  <stringProp name="IfController.condition">${__jexl(${__P(BMS_USER_COUNT)} == 1)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S12" enabled="true">
                    <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                    <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                    <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                    <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                    <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q4}&quot; ${CL_STDERR_REDIR}</stringProp>
                  </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="S13 (single-thread only)" enabled="true">
                  <stringProp name="IfController.condition">${__jexl(${__P(BMS_USER_COUNT)} == 1)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S13" enabled="true">
                    <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                    <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                    <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                    <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                    <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q5}&quot; ${CL_STDERR_REDIR}</stringProp>
                  </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                  <hashTree/>
                </hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S15" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q7}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S16" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_QA1}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S17" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_QA2}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S18" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_QA3}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S19" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_QJ1}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S20" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_QJ3}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S22" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_QJ5}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S23" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_QJ6}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S24" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_QJ7}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S25" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q8}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S26" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q9}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S27" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q10}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S28" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q11}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S29" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q12}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S30" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q13}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S31" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q14}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S32" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${HIVE_SA_CL_PREFIX} &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_SA)} ${HIVE_SA_HQL_Q15}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">0</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </SizeAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Impala" enabled="false">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_IMPALA)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SA Impala Queries" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IMPALA_SA_HQL_Q1" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_Q1</stringProp>
                <stringProp name="Argument.value">SELECT topic, polarity, count(*) as tweet_count
FROM activity_stream2
WHERE posted_dt&gt;=&apos;2012-03-10&apos;
  AND posted_dt&lt;=&apos;2012-03-13&apos;
GROUP BY topic, polarity
ORDER BY tweet_count
LIMIT 100;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_Q7" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_Q7</stringProp>
                <stringProp name="Argument.value">SELECT tweet_bin, count(*) as user_count
FROM (
   SELECT
       user_id,
       count(*) as tweet_count,
       cast(round(count(*)/10,0) * 10 as INT) as tweet_bin
     FROM activity_stream2
    GROUP BY user_id
) t0
GROUP BY tweet_bin
ORDER BY tweet_bin LIMIT 100;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_QA1" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_QA1</stringProp>
                <stringProp name="Argument.value">select count(*)
from (select count(*),document_id
        from activity_stream2
      group by document_id ) LocalAgg;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_QA2" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_QA2</stringProp>
                <stringProp name="Argument.value">select * from activity_stream2
  where document_id in (178204616368996353,
                   178204621574111234,
                   178204629274861569);</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_QA3" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_QA3</stringProp>
                <stringProp name="Argument.value">SELECT
        doc_txt_reg LIKE &apos;%@empos%&apos; as Positive,
        doc_txt_reg LIKE &apos;%@emneg%&apos; as Negative,
        doc_txt_reg LIKE &apos;%@emhum%&apos; as Humor,
        count(*)
FROM
        activity_stream2
GROUP BY
        Positive,
        Negative,
        Humor
HAVING
        count(*) &gt; 100
ORDER BY
        Positive, Negative, Humor
LIMIT 10
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_QJ1" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_QJ1</stringProp>
                <stringProp name="Argument.value">SELECT user_id, user_name, count(*) AS total
FROM activity_stream2
GROUP BY user_id, user_name
ORDER BY total desc limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_QJ3" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_QJ3</stringProp>
                <stringProp name="Argument.value">SELECT user_id, user_name, count(*) as total_tweets
FROM activity_stream2
WHERE is_retweet = false
GROUP BY user_id, user_name
ORDER BY total_tweets desc
limit 25
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_QJ4" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_QJ4</stringProp>
                <stringProp name="Argument.value">select
        t1.user_id,
        t1.user_name,
        t1.user_location,
        t1.hadoop_total,
        t2.aster_total
from
        (select user_id,user_name, user_location, count(*) as hadoop_total
        from activity_stream2
        where doc_txt like &apos;%hadoop%&apos;
        group by user_id,user_name,user_location) t1
JOIN
        (select user_id,user_name,user_location,count(*) as aster_total
        from activity_stream2
        where doc_txt like &apos;%asterdata%&apos;
        group by user_id,user_name, user_location) t2
ON
        t1.user_id = t2.user_id
order by
        t1.hadoop_total desc
limit 100;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_QJ5" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_QJ5</stringProp>
                <stringProp name="Argument.value">select
   user_id,
   user_name,
   count(*) as total
from activity_stream2
where
   klout_score&gt;95
   and follower_count &gt; 500
group by user_id,user_name
order by total desc limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_QJ6" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_QJ6</stringProp>
                <stringProp name="Argument.value">select
   user_id,
   user_name,
   count(*) as total
from activity_stream2
where
   is_retweet = false
   and klout_score&gt;95
group by user_id,user_name
order by total desc limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_QJ7" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_QJ7</stringProp>
                <stringProp name="Argument.value">select user_id,user_name, count(*) as total
from activity_stream2
WHERE is_retweet = true
group by user_id,user_name
order by total desc limit 25;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_Q8" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_Q8</stringProp>
                <stringProp name="Argument.value">select
   user_id,user_name,user_location,
   max(friends_count) as max_cnt
from activity_stream2
where doc_txt like &apos;%hadoop%&apos;
group by user_id,user_name,user_location
order by max_cnt desc limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_Q9" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_Q9</stringProp>
                <stringProp name="Argument.value">select
   user_id, user_name, screen_name,
   follower_count,
   user_location,
   klout_score,
   posted_ts
from activity_stream2
where user_name =&apos;BarackObama&apos;
order by posted_ts desc limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_Q10" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_Q10</stringProp>
                <stringProp name="Argument.value">select user_location, count(*) as total
from activity_stream2
where
      doc_txt like &apos;%oscar%&apos;
  and user_location &lt;&gt; &apos;&apos;
group by user_location
order by total desc limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_Q11" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_Q11</stringProp>
                <stringProp name="Argument.value">select user_location,count(*) as total
from activity_stream2
where user_location &lt;&gt; &apos;&apos;
group by user_location
order by total desc limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_Q12" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_Q12</stringProp>
                <stringProp name="Argument.value">select count(*)
from activity_stream2
where is_retweet = false
  and doc_txt like &apos;%syria%&apos;
  and user_location like &apos;%syria%&apos;;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_Q13" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_Q13</stringProp>
                <stringProp name="Argument.value">select
   user_id,user_name,user_location,
   max(follower_count) as max_cnt
from activity_stream2
group by user_id,user_name,user_location
order by max_cnt desc limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_Q14" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_Q14</stringProp>
                <stringProp name="Argument.value">select user_id,user_name,user_location,count(*) as total
from activity_stream2
where posted_month =4
  and posted_day =1
  and posted_year=2012
group by user_id,user_name,user_location
order by total desc limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_Q15" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_Q15</stringProp>
                <stringProp name="Argument.value">select
        t4.document_id,
        t4.user_name,
        t4.user_location,
        t4.doc_txt,
        t4.klout_score,
         t3.total
from
        (select t1.document_id as doc_id, count(*) as total
         from activity_stream2 t1
         JOIN activity_stream2 t2
           ON t1.document_id=t2.in_reply_to_status_id
         group by t1.document_id
         order by total desc limit 25) t3
JOIN activity_stream2 t4
ON t4.document_id = t3.doc_id
order by t3.total desc limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_CREATE_ACTIVITY_STREAM" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_CREATE_ACTIVITY_STREAM</stringProp>
                <stringProp name="Argument.value">DROP TABLE activity_stream2;

CREATE TABLE IF NOT EXISTS activity_stream2 (
    record_type_id INT,
    document_id BIGINT,
    posted_ts STRING,
    posted_hour INT,
    posted_day INT,
    posted_week INT,
    posted_month INT,
    posted_year INT,
    doc_txt STRING,
    doc_txt_reg STRING,
    is_retweet BOOLEAN,
    user_id BIGINT,
    user_name STRING,
    screen_name STRING,
    follower_count INT,
    friends_count INT,
    user_location STRING,
    in_reply_to_status_id BIGINT,
    language STRING,
    klout_score INT,
    polarity STRING,
    polarity_score DOUBLE,
    topic STRING,
    topic_score DOUBLE)
PARTITIONED BY (posted_dt STRING)
STORED AS SequenceFile;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_SA_HQL_LOAD_ACTIVITY_STREAM" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_SA_HQL_LOAD_ACTIVITY_STREAM</stringProp>
                <stringProp name="Argument.value">SET hive.exec.dynamic.partition.mode=nonstrict;
SET hive.exec.dynamic.partition=true;
SET hive.exec.max.dynamic.partitions=500;
SET hive.exec.max.dynamic.partitions.pernode=500;
SET mapred.child.java.opts=-Xmx2048m ;
SET mapred.reduce.tasks=40 ;
SET hive.mapred.reduce.tasks.speculative.execution=false ;

INSERT OVERWRITE TABLE activity_stream2 PARTITION (posted_dt)
    SELECT
        record_type_id,
        document_id,
        posted_ts,
        posted_hour,
        posted_day,
        posted_week,
        posted_month,
        posted_year,
        doc_txt,
        doc_txt_reg,
        is_retweet,
        user_id,
        user_name,
        screen_name,
        follower_count,
        friends_count,
        user_location,
        in_reply_to_status_id,
        language,
        klout_score,
        polarity,
        polarity_score,
        topic,
        topic_score,
        posted_dt
  FROM activity_stream
DISTRIBUTE BY posted_dt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Ensure correct use of shell escapes. This is key for Hive parameter references like ${hiveconf:xyz}, which must be escaped as \${hiveconf:xyz} to keep the remote shell from resolving it before it is passed to Hive</stringProp>
          </Arguments>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00: Hive create activity stream target table" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} -e  &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_WP)} ${IMPALA_SA_HQL_CREATE_ACTIVITY_STREAM}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S00: Hive insert into activity stream target table" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_WP)} ${IMPALA_SA_HQL_LOAD_ACTIVITY_STREAM}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
              <stringProp name="IfController.condition">${__P(EXEC_MODE_QUERY)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S09" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_Q1}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S15" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_Q7}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S16" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_QA1}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S17" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_QA2}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S18" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_QA3}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S19" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_QJ1}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S20" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_QJ3}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S22" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_QJ5}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S23" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_QJ6}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S24" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_QJ7}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S25" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_Q8}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S26" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_Q9}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S27" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_Q10}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S28" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_Q11}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S29" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_Q12}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S30" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_Q13}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="S31" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_SA_HQL_Q14}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">0</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </SizeAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${OUTPUT_FILENAME_STEM}-hadoop-SA.response.</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>true</xml>
                  <fieldNames>false</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>false</assertions>
                  <subresults>false</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                </value>
              </objProp>
              <stringProp name="filename">${OUTPUT_FILENAME_STEM}-hadoop-SA.csv</stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SA UDVs" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="HIVE_WP_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WP_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${HIVE_EXEC} -e</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${IMPALA_EXEC} -i datanode2 -q</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WP (wikipedia)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(BMS_WP_LOOP_COUNT)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(BMS_USER_COUNT)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(BMS_RAMP_UP_SEC)}</stringProp>
        <longProp name="ThreadGroup.start_time">1318848428000</longProp>
        <longProp name="ThreadGroup.end_time">1318848428000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Aster" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_ASTER)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="WP UDVs" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_ACT_WP_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ACT_WP_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${ASTER_ACT_EXEC} -d ${ASTER_DBNAME_WP} -U ${ASTER_ACT_UID} -w ${ASTER_ACT_PWD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="WP Aster Queries" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_WP_SQL_WP03" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_WP03</stringProp>
                <stringProp name="Argument.value">SELECT * FROM nPATH(
    on (select t2.* from ( select * from (select pagename, min(pageviews) as minv, max(pageviews) as maxv from hourly_pv group by pagename ) t where t.minv &lt;100 and t.maxv &gt; 10000)t1 , hourly_pv t2 where t1.pagename = t2.pagename)
    PARTITION BY pagename
    ORDER BY ymd,hour
    PATTERN(&apos;LOW+.HIGH+.LOW2*&apos;)
    MODE(NONOVERLAPPING)
        SYMBOLS(
            pageviews &lt; 100 AS LOW,
            pageviews &gt; 10000 AS HIGH,
            pageviews &lt; 100 as LOW2
            )
    RESULT (
        FIRST(pagename of LOW) as pagename,
        LAST(pageviews of LOW) as views_low,
        LAST(ymd of LOW) as low_change_date,
        LAST(hour of LOW) as low_change_hour,
        FIRST(pageviews of HIGH) as views_high,
        LAST(hour of HIGH) as high_change_hour,
        FIRST(pageviews of LOW2) as views_low2
        )
    )
order by low_change_date,low_change_hour;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WP_SQL_WP04" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_WP04</stringProp>
                <stringProp name="Argument.value">SELECT ymd, pagename, SUM(pageviews) AS Total
FROM hourly_pv
WHERE
(ymd BETWEEN &apos;2012-01-11&apos; AND &apos;2012-01-17&apos;) AND
pagename NOT LIKE &apos;Special:%&apos; AND
pagename NOT IN (&apos;404_error&apos;, &apos;Main_Page&apos;)
GROUP BY ymd, pagename
HAVING SUM(pageviews)&gt;50000
ORDER BY Total DESC;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WP_SQL_WP05" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_WP05</stringProp>
                <stringProp name="Argument.value">DROP TABLE IF EXISTS daily_pv;

CREATE FACT TABLE daily_pv
DISTRIBUTE BY HASH(pagename)
AS
SELECT ymd, pagename, SUM(pageviews) AS Total
FROM hourly_pv
GROUP BY ymd, pagename;
analyze daily_pv;
SELECT * FROM nPATH(
    on daily_pv
    PARTITION BY pagename
    ORDER BY ymd
    PATTERN(&apos;LOW+.HIGH+.LOW2*&apos;)
    MODE(NONOVERLAPPING)
    SYMBOLS(
        total &lt; 1000 AS LOW,
        total &gt; 50000 AS HIGH,
        total &lt; 1000 as LOW2
    )
RESULT (
    FIRST(pagename of LOW) as pagename,
    LAST(total of LOW) as views_low,
    LAST(ymd of LOW) as low_change_date,
    FIRST(total of HIGH) as views_high,
    FIRST(ymd of HIGH) as high_change_date,
    FIRST(total of LOW2) as views_low2,
    FIRST(ymd of LOW2) as low2_change_date
    )
);
SELECT * FROM nPATH(
    on (
          SELECT ymd, pagename, SUM(pageviews) AS Total
          FROM hourly_pv
          GROUP BY ymd, pagename
          )
    PARTITION BY pagename
    ORDER BY ymd
    PATTERN(&apos;LOW+.HIGH+.LOW2*&apos;)
    MODE(NONOVERLAPPING)
        SYMBOLS(
            total &lt; 1000 AS LOW,
            total &gt; 50000 AS HIGH,
            total &lt; 1000 AS LOW2)
    RESULT (
            FIRST(pagename of LOW) as pagename,
            LAST(total of LOW) as views_low,
            LAST(ymd of LOW) as low_change_date,
            FIRST(total of HIGH) as views_high,
            FIRST(ymd of HIGH) as high_change_date,
            FIRST(total of LOW2) as views_low2,
            FIRST(ymd of LOW2) as low2_change_date)
    )
order by low_change_date;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WP_SQL_WP06" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_WP06</stringProp>
                <stringProp name="Argument.value">SELECT pagename, sum(pageviews) AS total_views
FROM hourly_pv
GROUP BY pagename
ORDER BY total_views desc
LIMIT 10;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WP_SQL_WP07" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_WP07</stringProp>
                <stringProp name="Argument.value">SELECT pagename, old_views, new_views, new_views - old_views
FROM
    (
    SELECT a.pagename, sum(a.pageviews) as old_views, sum(b.pageviews) AS new_views
    FROM hourly_pv a, hourly_pv b
    WHERE a.ymd = &apos;2012-01-01&apos;
        AND a.hour = 8
        AND b.ymd = &apos;2012-01-01&apos;
        AND b.hour= 9
        AND a.pagename = b.pagename
    GROUP BY a.pagename
    ) AS compute_delta
ORDER BY new_views - old_views desc;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WP_SQL_WP08" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_WP08</stringProp>
                <stringProp name="Argument.value">SELECT pagename,pageviews,ymd,hour
FROM hourly_pv
WHERE pagename = &apos;Facebook&apos; AND ymd=&apos;2012-01-01&apos;
ORDER BY hour;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WP_SQL_WP09" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_WP09</stringProp>
                <stringProp name="Argument.value">SELECT pagename,ymd,sum(pageviews) AS total
FROM hourly_pv
WHERE ymd &gt;= &apos;2012-01-01&apos; AND ymd &lt;= &apos;2012-01-07&apos; AND pagename LIKE &apos;404_error&apos;
GROUP BY ymd,pagename
ORDER BY total desc
LIMIT 20;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WP_SQL_WP10" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_WP10</stringProp>
                <stringProp name="Argument.value">SELECT pagename,ymd,SUM(pageviews) AS total
FROM hourly_pv
WHERE ymd=&apos;2012-02-14&apos; AND hour IN (15,16,17) AND pagename LIKE &apos;%Valentine%&apos;
GROUP BY pagename,ymd
ORDER BY total desc
LIMIT 20;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WP_SQL_WP11" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_WP11</stringProp>
                <stringProp name="Argument.value">SELECT ymd, (SUM(CAST(bytes as bigint)*pageviews))/1073741824 AS total_gb
FROM hourly_pv
WHERE ymd &gt;= &apos;2012-01-01&apos; AND ymd &lt; &apos;2012-01-07&apos;
GROUP BY ymd
ORDER BY total_gb desc;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WP_SQL_WP12" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_WP12</stringProp>
                <stringProp name="Argument.value">SELECT *
FROM hourly_pv
WHERE pagename IN (&apos;$hamrock&apos;, &apos;%20November&apos;, &apos;%20funu&apos;);
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="WP DDL" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_WP_SQL_CREATE_DB" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_CREATE_DB</stringProp>
                <stringProp name="Argument.value">CREATE DATABASE ${ASTER_DBNAME_WP} ENCODING = &apos;UTF8&apos; ; </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WP_SQL_CREATE_TABLES" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_CREATE_TABLES</stringProp>
                <stringProp name="Argument.value">DROP TABLE IF EXISTS hourly_pv;

CREATE FACT TABLE hourly_pv (
    ymd date,
    hour int4,
    pagename varchar,
    pageviews int4,
    bytes int4,
    language character(4)
)
DISTRIBUTE BY HASH(pagename)
${STORAGE_WP_LAYOUT}
${STORAGE_WP_COMPRESSION}
PARTITION BY RANGE(ymd) (
	PARTITION week1(  END &apos;2012-01-07&apos; ),
	PARTITION week2(  END &apos;2012-01-14&apos; ),
	PARTITION week3(  END &apos;2012-01-21&apos; ),
	PARTITION week4(  END &apos;2012-01-28&apos; ),
	PARTITION week5(  END &apos;2012-02-04&apos; ),
	PARTITION week6(  END &apos;2012-02-11&apos; ),
	PARTITION week7(  END &apos;2012-02-18&apos; ),
	PARTITION week8(  END &apos;2012-02-25&apos; ),
	PARTITION week9(  END &apos;2012-03-03&apos; ),
	PARTITION week10( END &apos;2012-03-10&apos; ),
	PARTITION week11( END &apos;2012-03-17&apos; ),
	PARTITION week12( END &apos;2012-03-24&apos; ),
	PARTITION week13( END &apos;2012-03-31&apos; ),
	PARTITION week_all_end (END &apos;9999-12-31&apos;)
);
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WP_SQL_INSTALL_FUNCTIONS" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WP_SQL_INSTALL_FUNCTIONS</stringProp>
                <stringProp name="Argument.value">\remove npath.jar;
\install ${BENCHMARK_PATH}/apps/wikipedia/aster/mr_functions/npath.jar;
\remove sessionize.jar;
\install ${BENCHMARK_PATH}/apps/wikipedia/aster/mr_functions/sessionize.jar;
\remove SessionizeAppend.jar;
\install ${BENCHMARK_PATH}/apps/wikipedia/aster/mr_functions/SessionizeAppend.jar;
\remove WebLogParser.jar;
\install ${BENCHMARK_PATH}/apps/wikipedia/aster/mr_functions/WebLogParser.jar;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create DB (${ASTER_DBNAME_WP})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WP_SQL_CREATE_DB}&quot; | ${ASTER_ACT_EXEC} -e -d beehive -U ${ASTER_ACT_UID} -w ${ASTER_ACT_PWD} ${CL_STDERR_REDIR} | tee -a ${BENCHMARK_OUTPUT_PATH}/create.db.${ASTER_DBNAME_WP}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create tables (${ASTER_DBNAME_WP})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WP_SQL_CREATE_TABLES}&quot; | ${ASTER_ACT_WP_CL_PREFIX} -e ${CL_STDERR_REDIR} | tee -a ${BENCHMARK_OUTPUT_PATH}/create.tables.${ASTER_DBNAME_WP}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Install functions (${ASTER_DBNAME_WP})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WP_SQL_INSTALL_FUNCTIONS}&quot; | ${ASTER_ACT_WP_CL_PREFIX} -e ${CL_STDERR_REDIR} |  tee -a ${BENCHMARK_OUTPUT_PATH}/install.functions.${ASTER_DBNAME_WP}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Load scripts" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ASTER_WP_SH_LOAD" elementType="Argument">
                  <stringProp name="Argument.name">ASTER_WP_SH_LOAD</stringProp>
                  <stringProp name="Argument.value">set -o nounset
set -o errexit

# source imported from wp_load_ct.sh

echo &quot;Load wikimedia data into Aster, start time: $(date)&quot;
#INDIR=/data/data01/wikimedia/3m
#INDIR=${ASTER_INPUT_FILE_DIR}/wikipedia/test

DATA10X=${EXEC_10X_WP}

#If 10x data
if [ $DATA10X = true ]; then
   INDIR=${ASTER_INPUT_FILE_DIR}/wikipedia/10x
else
   INDIR=${ASTER_INPUT_FILE_DIR}/wikipedia
fi

MAXPS=16
QUEEN=${ASTER_HOST}
DB=${ASTER_DBNAME_WP}
USER=${ASTER_ACT_UID}
PASSWD=${ASTER_ACT_PWD}
TABLENAME=hourly_pv
PID=$$

if [[ ! -d $INDIR ]]; then
    echo &quot;ERROR - Directory $INDIR not found.&quot;
    exit 1
fi

#####################################
# Load the wikimedia files into Aster
#####################################

FLCNT=0

COMPRESSED=${EXEC_APP_COMPRESS_WP}

#If loading compressed WP files
if [ $COMPRESSED = true ]; then
   #If loading 10X data
   if [ $DATA10X = true]; then
      FILEPTN=${INDIR}/part-m-*.gz
   else
      FILEPTN=${INDIR}/pagecounts-*.gz
   fi
# else loading uncompressed WP files
else
   #If loading 10x data
   if [ $DATA10X = true]; then
      FILEPTN=${INDIR}/part-m-*
   else
      FILEPTN=${INDIR}/pagecounts-*.enC
   fi
fi

for FILE in `ls -1 ${FILEPTN}`
do
    PSCNT=`ps -ef | grep ncluster_loader | grep -v grep | wc -l`
    while [[ &quot;$PSCNT&quot; -ge &quot;$MAXPS&quot; ]]
    do
        echo &quot;sleeping 2 seconds : $PSCNT&quot;
        sleep 2
        PSCNT=`ps -ef | grep ncluster_loader | grep -v grep | wc -l`
    done

    # load
    echo loading $FILE $FLCNT date
   
#If loading compressed WP files
   if [ $COMPRESSED = true ]; then
      gzip -d -c $FILE | ncluster_loader -h $QUEEN -U $USER -w $PASSWD --el-discard-errors --el-enabled --el-limit 1000 -C ymd,hour,language,pagename,pageviews,bytes -D &quot; &quot; -d $DB $TABLENAME &amp;
#Else loading uncompressed files
   else
      ncluster_loader -h $QUEEN -U $USER -w $PASSWD --el-discard-errors --el-enabled --el-limit 1000 -C ymd,hour,language,pagename,pageviews,bytes -D &quot; &quot; -d $DB $TABLENAME $FILE &amp;
   fi

    FLCNT=`expr $FLCNT + 1`
    sleep 1
done

while [[ `ps --ppid $PID | wc -l` -gt 2 ]]
do
    sleep 10
done

echo &quot;Number of wikipedia files loaded into Aster: ${FLCNT}&quot;

echo &quot;Optimizing access for wikipedia (indexes, analyze)&quot;

act  -U $USER -w $PASSWD -d $DB &lt;&lt;EOF
ANALYZE hourly_pv;

CREATE INDEX date_hr_idx ON hourly_pv  (ymd, hour);

CREATE INDEX pagename_index_1 ON hourly_pv (pagename);
EOF

echo &quot;Done loading wikipedia data into Aster, end time: $(date)&quot;

</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Inject scripts" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">(echo &apos;${ASTER_WP_SH_LOAD}&apos; &gt; ${BENCHMARK_PATH}/apps/wikipedia/load_files.sh; chmod +x  ${BENCHMARK_PATH}/apps/wikipedia/load_files.sh) ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/inject.${ASTER_DBNAME_WP}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP00: Load files (${ASTER_DBNAME_WP})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/wikipedia/load_files.sh ${ASTER_INPUT_FILE_DIR}/wikipedia ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/load_files.${ASTER_DBNAME_WP}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1702243900">${ASTER_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WP03 (single-thread only)" enabled="true">
                <stringProp name="IfController.condition">${__jexl(${__P(BENCHMARK_USER_COUNT)} == 1)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <stringProp name="TestPlan.comments">needed to prevent deadlock with &gt; 1 user</stringProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP03" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">echo &quot;${ASTER_WP_SQL_WP03}&quot; | ${ASTER_ACT_WP_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                  <stringProp name="TestPlan.comments">Q1 spikes n/hrly pgview</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP04" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WP_SQL_WP04}&quot; | ${ASTER_ACT_WP_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q2 highest daily pgview</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WP05 (single-thread only)" enabled="true">
                <stringProp name="IfController.condition">${__jexl(${__P(BENCHMARK_USER_COUNT)} == 1)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <stringProp name="TestPlan.comments">needed to prevent deadlock with &gt; 1 user</stringProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP05" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">echo &quot;${ASTER_WP_SQL_WP05}&quot; | ${ASTER_ACT_WP_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                  <stringProp name="TestPlan.comments">Q3 spikes in daily pgview</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP06" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WP_SQL_WP06}&quot; | ${ASTER_ACT_WP_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">top10 pages based on #of views</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP07" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WP_SQL_WP07}&quot; | ${ASTER_ACT_WP_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Sudden traffic increase 8-9am, 1/1/12</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP08" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WP_SQL_WP08}&quot; | ${ASTER_ACT_WP_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Pageviews for facebook on specific day/time</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP09" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WP_SQL_WP09}&quot; | ${ASTER_ACT_WP_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Days with most 404_error pages</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP10" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WP_SQL_WP10}&quot; | ${ASTER_ACT_WP_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Most popular pages on Valentines Eve</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP11" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WP_SQL_WP11}&quot; | ${ASTER_ACT_WP_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Total data transferred per day for a week</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP12" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WP_SQL_WP12}&quot; | ${ASTER_ACT_WP_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Simple Lookup</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1702243900">${ASTER_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">0</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </SizeAssertion>
              <hashTree/>
              <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>false</assertions>
                    <subresults>false</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                  </value>
                </objProp>
                <stringProp name="filename">${OUTPUT_FILENAME_STEM}-aster-WP.csv</stringProp>
              </ResultCollector>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>true</responseData>
                    <samplerData>true</samplerData>
                    <xml>true</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>true</responseHeaders>
                    <requestHeaders>true</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <url>true</url>
                    <hostname>true</hostname>
                  </value>
                </objProp>
                <stringProp name="filename">${OUTPUT_FILENAME_STEM}-aster-WP.tree</stringProp>
              </ResultCollector>
              <hashTree/>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
                <stringProp name="FileSaver.filename">${OUTPUT_FILENAME_STEM}-WP.response.</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">false</boolProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Hadoop" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_HADOOP)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create DB (???)" enabled="true">
                <stringProp name="hostname"></stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username"></stringProp>
                <stringProp name="password"></stringProp>
                <stringProp name="command"></stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create tables (???)" enabled="true">
                <stringProp name="hostname"></stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username"></stringProp>
                <stringProp name="password"></stringProp>
                <stringProp name="command"></stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Install functions (???)" enabled="true">
                <stringProp name="hostname"></stringProp>
                <intProp name="port">0</intProp>
                <stringProp name="username"></stringProp>
                <stringProp name="password"></stringProp>
                <stringProp name="command"></stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WP00: Put files" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP00: Load files" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/wikipedia_load.sh 2&gt;&amp;1</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WP00: Load Hive" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP00: Hive create hourly_pv_stage" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/create_hourly_pv_staging.sh 2&gt;&amp;1</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP00: Hive create hourly_pv" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/create_hourly_pv.sh 2&gt;&amp;1</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP00: Hive load hourly_pv" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/load_hourly_pv.sh 2&gt;&amp;1</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Clear Target Structures" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="HDFS rm hourlyspikes" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HADOOP_EXEC} fs -rmr ${WP_JOB_OUT_DIR}/hourlySpikes ${CL_STDERR_REDIR} </stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="HDFS rm dailyspikes" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HADOOP_EXEC} fs -rmr ${WP_JOB_OUT_DIR}/dailySpikes ${CL_STDERR_REDIR} </stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WP03 (single-thread only)" enabled="true">
                <stringProp name="IfController.condition">${__jexl(${__P(BENCHMARK_USER_COUNT)} == 1)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <stringProp name="TestPlan.comments">needed to prevent deadlock with &gt; 1 user</stringProp>
              </IfController>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP03-1" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/wiki_hourly_spike_finder.sh 2&gt;&amp;1</stringProp>
                  <stringProp name="TestPlan.comments">hadoop jar com.asterdata.wiki.WikiSpikeFinder</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP04" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/run_query.sh WP04 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">Find pages with the highest daily page views within a given time frame</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WP05 (single-thread only)" enabled="true">
                <stringProp name="IfController.condition">${__jexl(${__P(BENCHMARK_USER_COUNT)} == 1)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <stringProp name="TestPlan.comments">needed to prevent deadlock with &gt; 1 user</stringProp>
              </IfController>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP05-1" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/wiki_daily_spike_finder.sh 2&gt;&amp;1</stringProp>
                  <stringProp name="TestPlan.comments">hadoop jar com.asterdata.wiki.WikiSpikeFinder</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP06" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/run_query.sh WP06 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">top ten pages by view count</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP07" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/run_query.sh WP07 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">find traffic increase in given timeframe</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP08" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/run_query.sh WP08 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">page views for facebookin given timeframe</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP09" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/run_query.sh WP09 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">days with most 404 errors in given time frame</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP10" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/run_query.sh WP10 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">most popular page on Valentine&apos;s eve</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP11" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/run_query.sh WP11 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">total data transfer volume in a given week</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP12" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/wikipedia/hadoop/run_query.sh WP12 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">hourly page views for page names matching filter expressions</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Impala" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_IMPALA)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="WP UDVs" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="HIVE_WP_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WP_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${HIVE_EXEC} -e</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${IMPALA_EXEC} -i datanode1 -q</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="WP Impala Queries" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IMPALA_WP_HQL_WP4" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_HQL_WP4</stringProp>
                <stringProp name="Argument.value">SELECT yomodo, page_name, SUM(page_view) AS Total
FROM hourly_pv2
WHERE yomodo &gt;= 20120111 AND yomodo &lt;= 20120117
       AND NOT (page_name LIKE &apos;Special:%&apos;)
       AND NOT (page_name IN (&apos;404_error&apos;, &apos;Main_Page&apos;))
GROUP BY yomodo, page_name
HAVING Total &gt;50000
ORDER BY Total DESC limit 1000;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_HQL_WP6" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_HQL_WP6</stringProp>
                <stringProp name="Argument.value">select page_name,total_views from (  select page_name,sum(page_view) as total_views  from hourly_pv2  group by page_name ) interim order by total_views desc limit 10; </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_HQL_WP7" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_HQL_WP7</stringProp>
                <stringProp name="Argument.value">select page_name, old_view, new_view, page_view_increase from
(
select a.page_name,sum(a.page_view) as old_view, sum(b.page_view) as new_view, (sum(b.page_view) - sum(a.page_view)) as page_view_increase
from hourly_pv2 a JOIN hourly_pv2 b
on a.page_name = b.page_name
where a.yomodo = 20120101 and a.hour = 8 and b.yomodo = 20120101 and b.hour = 9
group by a.page_name
) interim
order by page_view_increase desc limit 1000;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_HQL_WP8" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_HQL_WP8</stringProp>
                <stringProp name="Argument.value">select page_name,page_view,yomodo,hour
from hourly_pv2
where yomodo = 20120101 and page_name = &apos;Facebook&apos;
order by hour limit 24;

</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_HQL_WP9" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_HQL_WP9</stringProp>
                <stringProp name="Argument.value">select page_name,yomodo,total_views from
(
 select page_name,yomodo,sum(page_view) total_views
 from hourly_pv2
 where yomodo &gt;= 20120101 and yomodo &lt;= 20120107 and page_name like &apos;404_error&apos;
 group by yomodo,page_name
) interim
order by total_views desc
limit 20;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_HQL_WP10" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_HQL_WP10</stringProp>
                <stringProp name="Argument.value">select page_name,yomodo, total_view
from
(
select page_name, yomodo, sum(page_view) as total_view
from hourly_pv2
where yomodo = 20120214 and hour IN (15,16,17) and page_name like &apos;%Valentine%&apos;
group by page_name,yomodo
) interim
order by total_view desc
limit 10;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_HQL_WP11" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_HQL_WP11</stringProp>
                <stringProp name="Argument.value">select yomodo,total_gb from
(select yomodo, (sum(CAST(page_size as bigint) * page_view)) / 1073741824 as total_gb
from hourly_pv2
where yomodo &gt;= 20120101 and yomodo &lt; 20120107
group by yomodo
) interim
order by total_gb desc
limit 1000
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_HQL_WP12" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_HQL_WP12</stringProp>
                <stringProp name="Argument.value">SELECT *
FROM hourly_pv2
WHERE page_name IN (&apos;$hamrock&apos;, &apos;%20November&apos;, &apos;%20funu&apos;);
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_CREATE_HOURLY_PV2" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_CREATE_HOURLY_PV2</stringProp>
                <stringProp name="Argument.value">DROP TABLE hourly_pv2 ;
CREATE TABLE hourly_pv2 (
   hour INT,
   language STRING,
   page_name STRING,
   page_view INT,
   page_size INT
)
PARTITIONED BY (yomodo INT)
STORED AS SequenceFile
;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_LOAD_HOURLY_PV2" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_LOAD_HOURLY_PV2</stringProp>
                <stringProp name="Argument.value">${HIVE_COMPRESSION_PARM}

SET hive.exec.dynamic.partition.mode=nonstrict;
SET hive.exec.dynamic.partition=true;
SET hive.exec.max.dynamic.partitions=500;
SET hive.exec.max.dynamic.partitions.pernode=500;
SET mapred.reduce.tasks=50;

SET mapred.child.java.opts=-Xmx2048m ;
SET mapred.reduce.tasks=91 ;
SET hive.mapred.reduce.tasks.speculative.execution=false ;

INSERT OVERWRITE TABLE hourly_pv2 PARTITION (yomodo)
  SELECT hour,
         language,
         page_name,
         page_view,
         page_size,
         yomodo
  FROM hourly_pv
  WHERE page_size &lt;=2147483647
    AND page_view &lt;=2147483647
DISTRIBUTE BY yomodo
;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP04" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_WP_HQL_WP4}&quot; ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Find pages with the highest daily page views within a given time frame</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP06" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_WP_HQL_WP6}&quot; ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">top ten pages by view count</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP07" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_WP_HQL_WP7}&quot; ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">find traffic increase in given timeframe</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP08" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_WP_HQL_WP8}&quot; ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">page views for facebookin given timeframe</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP09" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_WP_HQL_WP9}&quot; ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">days with most 404 errors in given time frame</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP10" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_WP_HQL_WP10}&quot; ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">most popular page on Valentine&apos;s eve</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP11" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_WP_HQL_WP11}&quot; ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">total data transfer volume in a given week</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP12" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_WP_HQL_WP12}&quot; ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">hourly page views for page names matching filter expressions</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>true</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">0</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </SizeAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WP00: Load Hive" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP00: Hive create hourly_pv2" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">hive -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_WP)} ${IMPALA_WP_CREATE_HOURLY_PV2}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WP00: Hive load hourly_pv2" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">hive -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_WP)} ${IMPALA_WP_LOAD_HOURLY_PV2}&quot; ${CL_STDERR_REDIR}</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                  <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                  <stringProp name="SizeAssertion.size">0</stringProp>
                  <intProp name="SizeAssertion.operator">3</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </SizeAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WL (weblogs)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(BMS_WL_LOOP_COUNT)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(BMS_USER_COUNT)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(BMS_RAMP_UP_SEC)}</stringProp>
        <longProp name="ThreadGroup.start_time">1318848428000</longProp>
        <longProp name="ThreadGroup.end_time">1318848428000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Aster" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_ASTER)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="WL UDVs" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_ACT_WL_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ACT_WL_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${ASTER_ACT_EXEC} -d ${ASTER_DBNAME_WL} -U ${ASTER_ACT_UID} -w ${ASTER_ACT_PWD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="WL Queries" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_WL_SQL_WL05" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_WL05</stringProp>
                <stringProp name="Argument.value">select distinct(ip_address), count(*) as cnt
from TDcom_all_sessions300
group by ip_address
order by cnt desc;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_WL06" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_WL06</stringProp>
                <stringProp name="Argument.value">select distinct(page),count(*) as cnt
from TDcom_all_sessions300
group by page
order by cnt desc;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_WL07" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_WL07</stringProp>
                <stringProp name="Argument.value">select date(datestamp), count(distinct ip_address)
from TDcom_all_sessions300
group by date(datestamp)
order by date(datestamp);
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_WL08" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_WL08</stringProp>
                <stringProp name="Argument.value">SELECT
        extract(week from date(datestamp)) as wk,
        extract(year from date(datestamp)) as yr,
        count(distinct(ip_address))
FROM TDcom_all_sessions300
GROUP BY
        extract(week from date(datestamp)),
        extract(year from date(datestamp))
order by wk, yr;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_WL09" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_WL09</stringProp>
                <stringProp name="Argument.value">select date(datestamp), count(distinct page)
from TDcom_all_sessions300
group by date(datestamp)
order by date(datestamp);
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_WL10" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_WL10</stringProp>
                <stringProp name="Argument.value">
SELECT
        extract(week from date(datestamp)) as wk,
        extract(year from date(datestamp)) as yr,
        count(distinct page)
FROM TDcom_all_sessions300
GROUP BY
         extract(week from date(datestamp)),
         extract(year from date(datestamp))
order by wk, yr;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_WL11" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_WL11</stringProp>
                <stringProp name="Argument.value">DROP VIEW IF EXISTS small_sessions2;

CREATE VIEW small_sessions2
as SELECT T.* FROM (
        SELECT T.*, COUNT(*)
        OVER (PARTITION BY ip_address, sessionid) as depth
        FROM TDcom_all_sessions300 T) as T
WHERE depth &lt;= 100;

SELECT path, depth, count(path) as count
FROM nPath (
        ON small_sessions2
        PARTITION BY ip_address, sessionid
        ORDER BY datestamp, page
        PATTERN (&apos;BROWSE+&apos;)
        MODE (NONOVERLAPPING)
        SYMBOLS (true as BROWSE)
        RESULT (
                ACCUMULATE(coalesce(substring(page from &apos;/(.+?)/&apos;), &apos;home&apos;) OF BROWSE) AS path,
                COUNT(* of BROWSE) as depth
                )
        )
group by path, depth
order by count desc;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_WL12" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_WL12</stringProp>
                <stringProp name="Argument.value">SELECT path, depth, count(path) as count
FROM nPath (
     ON TDcom_all_sessions300
     PARTITION BY ip_address
     ORDER BY datestamp, page
     PATTERN (&apos;^BROWSE.BROWSE.BROWSE&apos;)
     MODE (NONOVERLAPPING)
     SYMBOLS (
        true as BROWSE
        )
     RESULT (
        ACCUMULATE(coalesce(substring(page from &apos;/(.+?)/&apos;), &apos;home&apos;) OF BROWSE) AS path,
        COUNT(* of BROWSE) as depth
        )
     )
group by path, depth
order by count desc;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_WL13" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_WL13</stringProp>
                <stringProp name="Argument.value">SELECT path, depth, count(path) as count
FROM nPath (
     ON TDcom_all_sessions300
     PARTITION BY ip_address
     ORDER BY datestamp, page
     PATTERN (&apos;^BROWSE.BROWSE.BROWSE.BROWSE.BROWSE &apos;)
     MODE (NONOVERLAPPING)
     SYMBOLS (
        true as BROWSE
        )
     RESULT (
        ACCUMULATE(coalesce(substring(page from &apos;/(.+?)/&apos;), &apos;home&apos;) OF BROWSE) AS path,
        COUNT(* of BROWSE) as depth
        )
     )
group by path, depth
order by count desc;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_WL14" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_WL14</stringProp>
                <stringProp name="Argument.value">SELECT ip, sid, ddate, path, depth, count(path) as count
FROM nPath (
     ON TDcom_all_sessions300
     PARTITION BY ip_address, sessionid
     ORDER BY datestamp
     PATTERN (&apos;BROWSE+&apos;)
     MODE (NONOVERLAPPING)
     SYMBOLS (
        (date(datestamp)=&apos;03-01-2012&apos; and ip_address not like &apos;153.%&apos;) as BROWSE
        )
     RESULT (
        FIRST(ip_address of BROWSE) as ip,
        FIRST(date(datestamp) of BROWSE) as ddate,
        FIRST(sessionid of BROWSE) as sid,
        ACCUMULATE(coalesce(substring(page from &apos;/(.+?)/&apos;), &apos;home&apos;) OF BROWSE) AS path,
        COUNT(* of BROWSE) as depth
        )
)
group by ip, sid, ddate, path, depth
order by depth desc;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_WL15" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_WL15</stringProp>
                <stringProp name="Argument.value">DROP TABLE IF EXISTS td_unique_visitors;

CREATE TABLE td_unique_visitors
AS 
SELECT MIN(datestamp), ip_address
FROM  TDcom_all_sessions300
WHERE DATE(datestamp) BETWEEN &apos;2012-02-29&apos; 
    AND &apos;2012-06-18&apos;
GROUP  BY ip_address;
ANALYZE td_unique_visitors;

DROP TABLE IF EXISTS TDcom_0424;

CREATE FACT TABLE TDcom_0424
DISTRIBUTE BY HASH (ip_address)
AS 
SELECT *
FROM  WebLogParser (
    ON TDcom_0424_raw
LOG(&apos;IIS&apos;)
EXCLUDE(&apos;.png, .xml, .js, .css, .gif, .jpg, .jpeg, .ico, robots.txt&apos;)
RETURNSEARCHTERMS(&apos;YES&apos;));
ANALYZE TDcom_0424;

INSERT INTO TDcom_all_sessions300 (datestamp, ip_address, page,
        referrer, search_terms, sessionid)
SELECT datestamp, ip_address, page, referrer, search_terms, sessionid
FROM  SessionizeAppend (
    ON (
        SELECT
            sd.ip_address AS ip_address,
            sd.page AS page,
            sd.datestamp AS datestamp,
            sd.referrer AS referrer,
            sd.search_terms AS search_terms,
            iv.last_sessionid AS last_sessionid,
            iv.last_datestamp AS last_datestamp
        FROM tdcom_0424 sd
        LEFT OUTER JOIN
            (
            SELECT sds.ip_address AS ip_address,
            MAX(sds.sessionid) AS last_sessionid,
            MAX(sds.datestamp) AS last_datestamp
            FROM TDcom_all_sessions300 sds
            WHERE sds.datestamp &gt; (
SELECT MAX(DATE_TRUNC(&apos;day&apos;, sdsr.datestamp)) + interval &apos;1 day&apos; - interval &apos;5 minute&apos; 
FROM  TDcom_all_sessions300 sdsr)
            GROUP BY sds.ip_address
            ) iv
        ON sd.ip_address = iv.ip_address
       )
    PARTITION BY ip_address
    ORDER BY datestamp
    TIMECOLUMN (&apos;datestamp&apos;)
    TIMEOUT (300)
    LASTSESSIONIDCOLUMN (&apos;last_sessionid&apos;)
    LASTTIMECOLUMN (&apos;last_datestamp&apos;)
) s;
ANALYZE TDcom_all_sessions300;

SELECT 
    COUNT(DISTINCT 
CASE   WHEN v.ip_address IS NULL THEN s.ip_address 
END ) AS newVisitorCnt,
    COUNT(DISTINCT 
CASE   WHEN v.ip_address IS NOT NULL THEN v.ip_address 
END ) AS returnVisitorCnt
FROM  TDcom_all_sessions300 s
LEFT OUTER JOIN td_unique_visitors v
    ON (s.ip_address = v.ip_address)
WHERE DATE(s.datestamp)=&apos;2012-04-24&apos;;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="WL DDL" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_WL_SQL_CREATE_DB" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_CREATE_DB</stringProp>
                <stringProp name="Argument.value">CREATE DATABASE ${ASTER_DBNAME_WL} ENCODING = &apos;UTF8&apos; ;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_CREATE_TABLES" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_CREATE_TABLES</stringProp>
                <stringProp name="Argument.value">\! echo  &apos;Query WL15b-preps1&apos;;
\! echo &apos;Query Description: 1-DROP+DROP 2-CREATE 3-DROP 4-DROP 5-DROP 6-CREATE 7-DROP 8-DROP&apos;;

DROP TABLE IF EXISTS TDcom_all_raw;
CREATE TABLE TDcom_all_raw (data varchar, partition key(data));
DROP TABLE IF EXISTS TDcom_all;
DROP VIEW IF EXISTS small_sessions2;
DROP TABLE IF EXISTS TDcom_all_sessions300;

DROP TABLE IF EXISTS TDcom_0424_raw;
CREATE TABLE TDcom_0424_raw (data varchar, partition key(data));
DROP TABLE IF EXISTS TDcom_0424;

DROP TABLE IF EXISTS td_unique_visitors;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_WL_SQL_INSTALL_FUNCTIONS" elementType="Argument">
                <stringProp name="Argument.name">ASTER_WL_SQL_INSTALL_FUNCTIONS</stringProp>
                <stringProp name="Argument.value">\remove SessionizeAppend.jar;
\install ${BENCHMARK_PATH}/apps/weblogs/aster/mr_functions/SessionizeAppend.jar;
\remove WebLogParser.jar;
\install ${BENCHMARK_PATH}/apps/weblogs/aster/mr_functions/WebLogParser.jar;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create DB (${ASTER_DBNAME_WL})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_CREATE_DB}&quot; | ${ASTER_ACT_EXEC} -d beehive -U ${ASTER_ACT_UID} -w ${ASTER_ACT_PWD} -e ${CL_STDERR_REDIR}  |  tee -a ${BENCHMARK_OUTPUT_PATH}/create.db.${ASTER_DBNAME_WL}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create tables (${ASTER_DBNAME_WL})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_CREATE_TABLES}&quot; | ${ASTER_ACT_WL_CL_PREFIX} -e ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/create.tables.${ASTER_DBNAME_WL}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Install functions (${ASTER_DBNAME_WL})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_INSTALL_FUNCTIONS}&quot; | ${ASTER_ACT_WL_CL_PREFIX} -e ${CL_STDERR_REDIR}  |  tee -a ${BENCHMARK_OUTPUT_PATH}/install.functions.${ASTER_DBNAME_WL}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Load scripts" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ASTER_WL_SH_LOAD_SCRIPT" elementType="Argument">
                  <stringProp name="Argument.name">ASTER_WL_SH_LOAD_SCRIPT</stringProp>
                  <stringProp name="Argument.value">#!/bin/sh  
set -o nounset 
set -o pipefail

# source imported from wl_load.sh  
echo &quot;Load web log data into Aster, start time: $(date)&quot;
INDIR=${ASTER_INPUT_FILE_DIR}/weblogs
DATADIR=$INDIR
MAXPS=16 QUEEN=${ASTER_HOST}
DB=${ASTER_DBNAME_WL}
USER=${ASTER_ACT_UID}
PASSWD=${ASTER_ACT_PWD}
TABLENAME=TDcom_all_raw
SLEEP_SEC=2 PID=$$
if [[ ! -d $INDIR ]]; 
then     
    echo &quot;ERROR - Directory $INDIR not found.&quot;
    exit 1
fi
#####################################
# Load the wikimedia files into Aster
#####################################
FLCNT=0

COMPRESSED=${EXEC_APP_COMPRESS_WL}

if [[ $COMPRESSED = true ]]; then
   FILEPTN=${INDIR}/TDcom_*.logx.gz
else
   FILEPTN=${INDIR}/TDcom_*.logx
fi

for FILE in `ls -1 ${FILEPTN}`
do
    PSCNT=`ps -ef | grep ncluster_loader | grep -v grep | wc -l`
    while [[ &quot;$PSCNT&quot; -ge &quot;$MAXPS&quot; ]]
    do
        echo &quot;sleeping $SLEEP_SEC seconds : $PSCNT&quot;
        sleep $SLEEP_SEC
        PSCNT=`ps -ef | grep ncluster_loader | grep -v grep | wc -l`
    done
    echo loading $FILE $FLCNT

if [[ $COMPRESSED = true ]]; then
   gzip -d -c $FILE | ncluster_loader -h $QUEEN -U $USER -w $PASSWD --el-discard-errors --el-enabled --el-limit 1000 -d $DB $TABLENAME &amp;
else
   ncluster_loader -h $QUEEN -U $USER -w $PASSWD --el-discard-errors --el-enabled --el-limit 1000 -d $DB $TABLENAME $FILE &amp;
fi
    FLCNT=`expr $FLCNT + 1`
    sleep $SLEEP_SEC
done
while [[ `ps --ppid $PID | wc -l` -gt 2 ]]
do
    sleep $SLEEP_SEC
done
echo &quot;Number of weblog files loaded into Aster: ${FLCNT}&quot;
echo &quot;Done loading data into Aster, end time: $(date)&quot;

gzip -d -c $DATADIR/TDcom_A_u_ex120424.logx | ncluster_loader -h $QUEEN -U $USER -w $PASSWD --el-discard-errors --el-enabled --el-limit 1000 -d $DB TDcom_0424_raw
gzip -d -c $DATADIR/TDcom_B_u_ex120424.logx | ncluster_loader -h $QUEEN -U $USER -w $PASSWD --el-discard-errors --el-enabled --el-limit 1000 -d $DB TDcom_0424_raw
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ASTER_WL_SH_PARSE_SCRIPT" elementType="Argument">
                  <stringProp name="Argument.name">ASTER_WL_SH_PARSE_SCRIPT</stringProp>
                  <stringProp name="Argument.value">\! echo &apos;Query WL15b-preps2&apos;;
\! echo &apos;Query Description: 1-CREATE 2-ANALYZE 3-CREATE 4-ANALYZE&apos;;

\! echo &apos;WebLogParser to create table TDcom_all&apos;;

DROP TABLE IF EXISTS TDcom_all;

CREATE fact table TDcom_all (
    datestamp timestamp without time zone ,
    ip_address character varying ,
    page character varying ,
    referrer character varying ,
    search_terms character varying )
DISTRIBUTE BY HASH (ip_address)
${STORAGE_WL_LAYOUT}
${STORAGE_WL_COMPRESSION}
PARTITION BY RANGE(datestamp) (
    PARTITION d20120229 ( END &apos;2012-02-29&apos; ),
    PARTITION d20120301 ( END &apos;2012-03-01&apos; ),
    PARTITION d20120302 ( END &apos;2012-03-02&apos; ),
    PARTITION d20120303 ( END &apos;2012-03-03&apos; ),
    PARTITION d20120304 ( END &apos;2012-03-04&apos; ),
    PARTITION d20120305 ( END &apos;2012-03-05&apos; ),
    PARTITION d20120306 ( END &apos;2012-03-06&apos; ),
    PARTITION d20120307 ( END &apos;2012-03-07&apos; ),
    PARTITION d20120308 ( END &apos;2012-03-08&apos; ),
    PARTITION d20120309 ( END &apos;2012-03-09&apos; ),
    PARTITION d20120310 ( END &apos;2012-03-10&apos; ),
    PARTITION d20120311 ( END &apos;2012-03-11&apos; ),
    PARTITION d20120312 ( END &apos;2012-03-12&apos; ),
    PARTITION d20120313 ( END &apos;2012-03-13&apos; ),
    PARTITION d20120314 ( END &apos;2012-03-14&apos; ),
    PARTITION d20120315 ( END &apos;2012-03-15&apos; ),
    PARTITION d20120316 ( END &apos;2012-03-16&apos; ),
    PARTITION d20120317 ( END &apos;2012-03-17&apos; ),
    PARTITION d20120318 ( END &apos;2012-03-18&apos; ),
    PARTITION d20120319 ( END &apos;2012-03-19&apos; ),
    PARTITION d20120320 ( END &apos;2012-03-20&apos; ),
    PARTITION d20120321 ( END &apos;2012-03-21&apos; ),
    PARTITION d20120322 ( END &apos;2012-03-22&apos; ),
    PARTITION d20120323 ( END &apos;2012-03-23&apos; ),
    PARTITION d20120324 ( END &apos;2012-03-24&apos; ),
    PARTITION d20120325 ( END &apos;2012-03-25&apos; ),
    PARTITION d20120326 ( END &apos;2012-03-26&apos; ),
    PARTITION d20120327 ( END &apos;2012-03-27&apos; ),
    PARTITION d20120328 ( END &apos;2012-03-28&apos; ),
    PARTITION d20120329 ( END &apos;2012-03-29&apos; ),
    PARTITION d20120330 ( END &apos;2012-03-30&apos; ),
    PARTITION d20120331 ( END &apos;2012-03-31&apos; ),
    PARTITION d20120401 ( END &apos;2012-04-01&apos; ),
    PARTITION d20120402 ( END &apos;2012-04-02&apos; ),
    PARTITION d20120403 ( END &apos;2012-04-03&apos; ),
    PARTITION d20120404 ( END &apos;2012-04-04&apos; ),
    PARTITION d20120405 ( END &apos;2012-04-05&apos; ),
    PARTITION d20120406 ( END &apos;2012-04-06&apos; ),
    PARTITION d20120407 ( END &apos;2012-04-07&apos; ),
    PARTITION d20120408 ( END &apos;2012-04-08&apos; ),
    PARTITION d20120409 ( END &apos;2012-04-09&apos; ),
    PARTITION d20120410 ( END &apos;2012-04-10&apos; ),
    PARTITION d20120411 ( END &apos;2012-04-11&apos; ),
    PARTITION d20120412 ( END &apos;2012-04-12&apos; ),
    PARTITION d20120413 ( END &apos;2012-04-13&apos; ),
    PARTITION d20120414 ( END &apos;2012-04-14&apos; ),
    PARTITION d20120415 ( END &apos;2012-04-15&apos; ),
    PARTITION d20120416 ( END &apos;2012-04-16&apos; ),
    PARTITION d20120417 ( END &apos;2012-04-17&apos; ),
    PARTITION d20120418 ( END &apos;2012-04-18&apos; ),
    PARTITION d20120419 ( END &apos;2012-04-19&apos; ),
    PARTITION d20120420 ( END &apos;2012-04-20&apos; ),
    PARTITION d20120421 ( END &apos;2012-04-21&apos; ),
    PARTITION d20120422 ( END &apos;2012-04-22&apos; ),
    PARTITION d20120423 ( END &apos;2012-04-23&apos; ),
    PARTITION d20120424 ( END &apos;2012-04-24&apos; ),
    PARTITION d20120425 ( END &apos;2012-04-25&apos; ),
    PARTITION d20120426 ( END &apos;2012-04-26&apos; ),
    PARTITION d20120427 ( END &apos;2012-04-27&apos; ),
    PARTITION d20120428 ( END &apos;2012-04-28&apos; ),
    PARTITION d20120429 ( END &apos;2012-04-29&apos; ),
    PARTITION d20120430 ( END &apos;2012-04-30&apos; ),
    PARTITION d20120501 ( END &apos;2012-05-01&apos; ),
    PARTITION d20120502 ( END &apos;2012-05-02&apos; ),
    PARTITION d20120503 ( END &apos;2012-05-03&apos; ),
    PARTITION d20120504 ( END &apos;2012-05-04&apos; ),
    PARTITION d20120505 ( END &apos;2012-05-05&apos; ),
    PARTITION d20120506 ( END &apos;2012-05-06&apos; ),
    PARTITION d20120507 ( END &apos;2012-05-07&apos; ),
    PARTITION d20120508 ( END &apos;2012-05-08&apos; ),
    PARTITION d20120509 ( END &apos;2012-05-09&apos; ),
    PARTITION d20120510 ( END &apos;2012-05-10&apos; ),
    PARTITION d20120511 ( END &apos;2012-05-11&apos; ),
    PARTITION d20120512 ( END &apos;2012-05-12&apos; ),
    PARTITION d20120513 ( END &apos;2012-05-13&apos; ),
    PARTITION d20120514 ( END &apos;2012-05-14&apos; ),
    PARTITION d20120515 ( END &apos;2012-05-15&apos; ),
    PARTITION d20120516 ( END &apos;2012-05-16&apos; ),
    PARTITION d20120517 ( END &apos;2012-05-17&apos; ),
    PARTITION d20120518 ( END &apos;2012-05-18&apos; ),
    PARTITION d20120519 ( END &apos;2012-05-19&apos; ),
    PARTITION d20120520 ( END &apos;2012-05-20&apos; ),
    PARTITION d20120521 ( END &apos;2012-05-21&apos; ),
    PARTITION d20120522 ( END &apos;2012-05-22&apos; ),
    PARTITION d20120523 ( END &apos;2012-05-23&apos; ),
    PARTITION d20120524 ( END &apos;2012-05-24&apos; ),
    PARTITION d20120525 ( END &apos;2012-05-25&apos; ),
    PARTITION d20120526 ( END &apos;2012-05-26&apos; ),
    PARTITION d20120527 ( END &apos;2012-05-27&apos; ),
    PARTITION d20120528 ( END &apos;2012-05-28&apos; ),
    PARTITION d20120529 ( END &apos;2012-05-29&apos; ),
    PARTITION d20120530 ( END &apos;2012-05-30&apos; ),
    PARTITION d20120531 ( END &apos;2012-05-31&apos; ),
    PARTITION d20120601 ( END &apos;2012-06-01&apos; ),
    PARTITION d20120602 ( END &apos;2012-06-02&apos; ),
    PARTITION d20120603 ( END &apos;2012-06-03&apos; ),
    PARTITION d20120604 ( END &apos;2012-06-04&apos; ),
    PARTITION d20120605 ( END &apos;2012-06-05&apos; ),
    PARTITION d20120606 ( END &apos;2012-06-06&apos; ),
    PARTITION d20120607 ( END &apos;2012-06-07&apos; ),
    PARTITION d20120608 ( END &apos;2012-06-08&apos; ),
    PARTITION d20120609 ( END &apos;2012-06-09&apos; ),
    PARTITION d20120610 ( END &apos;2012-06-10&apos; ),
    PARTITION d20120611 ( END &apos;2012-06-11&apos; ),
    PARTITION d20120612 ( END &apos;2012-06-12&apos; ),
    PARTITION d20120613 ( END &apos;2012-06-13&apos; ),
    PARTITION d20120614 ( END &apos;2012-06-14&apos; ),
    PARTITION d20120615 ( END &apos;2012-06-15&apos; ),
    PARTITION d20120616 ( END &apos;2012-06-16&apos; ),
    PARTITION d20120617 ( END &apos;2012-06-17&apos; ),
    PARTITION d20120618 ( END &apos;2012-06-18&apos; ),
    PARTITION d20120619 ( END &apos;2012-06-19&apos; ),
    PARTITION d20120620 ( END &apos;2012-06-20&apos; )
);

INSERT INTO TDcom_all
SELECT *
FROM WebLogParser (
ON TDcom_all_raw
LOG(&apos;IIS&apos;)
EXCLUDE(&apos;.png, .xml, .js, .css, .gif, .jpg, .jpeg, .ico, robots.txt&apos;)
RETURNSEARCHTERMS(&apos;YES&apos;));
analyze TDcom_all;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ASTER_WL_SH_SESSIONIZE_SCRIPT" elementType="Argument">
                  <stringProp name="Argument.name">ASTER_WL_SH_SESSIONIZE_SCRIPT</stringProp>
                  <stringProp name="Argument.value">\! echo &apos;SessionizeAppend to create table  TDcom_all_sessions300&apos;;
CREATE table TDcom_all_sessions300 (
    datestamp timestamp without time zone ,
    ip_address character varying ,
    page character varying ,
    referrer character varying ,
    search_terms character varying ,
    sessionid bigint )
DISTRIBUTE BY HASH(ip_address)
${STORAGE_WL_LAYOUT}
${STORAGE_WL_COMPRESSION}
PARTITION BY RANGE(datestamp) (
    PARTITION d20120229 ( END &apos;2012-02-29&apos; ),
    PARTITION d20120301 ( END &apos;2012-03-01&apos; ),
    PARTITION d20120302 ( END &apos;2012-03-02&apos; ),
    PARTITION d20120303 ( END &apos;2012-03-03&apos; ),
    PARTITION d20120304 ( END &apos;2012-03-04&apos; ),
    PARTITION d20120305 ( END &apos;2012-03-05&apos; ),
    PARTITION d20120306 ( END &apos;2012-03-06&apos; ),
    PARTITION d20120307 ( END &apos;2012-03-07&apos; ),
    PARTITION d20120308 ( END &apos;2012-03-08&apos; ),
    PARTITION d20120309 ( END &apos;2012-03-09&apos; ),
    PARTITION d20120310 ( END &apos;2012-03-10&apos; ),
    PARTITION d20120311 ( END &apos;2012-03-11&apos; ),
    PARTITION d20120312 ( END &apos;2012-03-12&apos; ),
    PARTITION d20120313 ( END &apos;2012-03-13&apos; ),
    PARTITION d20120314 ( END &apos;2012-03-14&apos; ),
    PARTITION d20120315 ( END &apos;2012-03-15&apos; ),
    PARTITION d20120316 ( END &apos;2012-03-16&apos; ),
    PARTITION d20120317 ( END &apos;2012-03-17&apos; ),
    PARTITION d20120318 ( END &apos;2012-03-18&apos; ),
    PARTITION d20120319 ( END &apos;2012-03-19&apos; ),
    PARTITION d20120320 ( END &apos;2012-03-20&apos; ),
    PARTITION d20120321 ( END &apos;2012-03-21&apos; ),
    PARTITION d20120322 ( END &apos;2012-03-22&apos; ),
    PARTITION d20120323 ( END &apos;2012-03-23&apos; ),
    PARTITION d20120324 ( END &apos;2012-03-24&apos; ),
    PARTITION d20120325 ( END &apos;2012-03-25&apos; ),
    PARTITION d20120326 ( END &apos;2012-03-26&apos; ),
    PARTITION d20120327 ( END &apos;2012-03-27&apos; ),
    PARTITION d20120328 ( END &apos;2012-03-28&apos; ),
    PARTITION d20120329 ( END &apos;2012-03-29&apos; ),
    PARTITION d20120330 ( END &apos;2012-03-30&apos; ),
    PARTITION d20120331 ( END &apos;2012-03-31&apos; ),
    PARTITION d20120401 ( END &apos;2012-04-01&apos; ),
    PARTITION d20120402 ( END &apos;2012-04-02&apos; ),
    PARTITION d20120403 ( END &apos;2012-04-03&apos; ),
    PARTITION d20120404 ( END &apos;2012-04-04&apos; ),
    PARTITION d20120405 ( END &apos;2012-04-05&apos; ),
    PARTITION d20120406 ( END &apos;2012-04-06&apos; ),
    PARTITION d20120407 ( END &apos;2012-04-07&apos; ),
    PARTITION d20120408 ( END &apos;2012-04-08&apos; ),
    PARTITION d20120409 ( END &apos;2012-04-09&apos; ),
    PARTITION d20120410 ( END &apos;2012-04-10&apos; ),
    PARTITION d20120411 ( END &apos;2012-04-11&apos; ),
    PARTITION d20120412 ( END &apos;2012-04-12&apos; ),
    PARTITION d20120413 ( END &apos;2012-04-13&apos; ),
    PARTITION d20120414 ( END &apos;2012-04-14&apos; ),
    PARTITION d20120415 ( END &apos;2012-04-15&apos; ),
    PARTITION d20120416 ( END &apos;2012-04-16&apos; ),
    PARTITION d20120417 ( END &apos;2012-04-17&apos; ),
    PARTITION d20120418 ( END &apos;2012-04-18&apos; ),
    PARTITION d20120419 ( END &apos;2012-04-19&apos; ),
    PARTITION d20120420 ( END &apos;2012-04-20&apos; ),
    PARTITION d20120421 ( END &apos;2012-04-21&apos; ),
    PARTITION d20120422 ( END &apos;2012-04-22&apos; ),
    PARTITION d20120423 ( END &apos;2012-04-23&apos; ),
    PARTITION d20120424 ( END &apos;2012-04-24&apos; ),
    PARTITION d20120425 ( END &apos;2012-04-25&apos; ),
    PARTITION d20120426 ( END &apos;2012-04-26&apos; ),
    PARTITION d20120427 ( END &apos;2012-04-27&apos; ),
    PARTITION d20120428 ( END &apos;2012-04-28&apos; ),
    PARTITION d20120429 ( END &apos;2012-04-29&apos; ),
    PARTITION d20120430 ( END &apos;2012-04-30&apos; ),
    PARTITION d20120501 ( END &apos;2012-05-01&apos; ),
    PARTITION d20120502 ( END &apos;2012-05-02&apos; ),
    PARTITION d20120503 ( END &apos;2012-05-03&apos; ),
    PARTITION d20120504 ( END &apos;2012-05-04&apos; ),
    PARTITION d20120505 ( END &apos;2012-05-05&apos; ),
    PARTITION d20120506 ( END &apos;2012-05-06&apos; ),
    PARTITION d20120507 ( END &apos;2012-05-07&apos; ),
    PARTITION d20120508 ( END &apos;2012-05-08&apos; ),
    PARTITION d20120509 ( END &apos;2012-05-09&apos; ),
    PARTITION d20120510 ( END &apos;2012-05-10&apos; ),
    PARTITION d20120511 ( END &apos;2012-05-11&apos; ),
    PARTITION d20120512 ( END &apos;2012-05-12&apos; ),
    PARTITION d20120513 ( END &apos;2012-05-13&apos; ),
    PARTITION d20120514 ( END &apos;2012-05-14&apos; ),
    PARTITION d20120515 ( END &apos;2012-05-15&apos; ),
    PARTITION d20120516 ( END &apos;2012-05-16&apos; ),
    PARTITION d20120517 ( END &apos;2012-05-17&apos; ),
    PARTITION d20120518 ( END &apos;2012-05-18&apos; ),
    PARTITION d20120519 ( END &apos;2012-05-19&apos; ),
    PARTITION d20120520 ( END &apos;2012-05-20&apos; ),
    PARTITION d20120521 ( END &apos;2012-05-21&apos; ),
    PARTITION d20120522 ( END &apos;2012-05-22&apos; ),
    PARTITION d20120523 ( END &apos;2012-05-23&apos; ),
    PARTITION d20120524 ( END &apos;2012-05-24&apos; ),
    PARTITION d20120525 ( END &apos;2012-05-25&apos; ),
    PARTITION d20120526 ( END &apos;2012-05-26&apos; ),
    PARTITION d20120527 ( END &apos;2012-05-27&apos; ),
    PARTITION d20120528 ( END &apos;2012-05-28&apos; ),
    PARTITION d20120529 ( END &apos;2012-05-29&apos; ),
    PARTITION d20120530 ( END &apos;2012-05-30&apos; ),
    PARTITION d20120531 ( END &apos;2012-05-31&apos; ),
    PARTITION d20120601 ( END &apos;2012-06-01&apos; ),
    PARTITION d20120602 ( END &apos;2012-06-02&apos; ),
    PARTITION d20120603 ( END &apos;2012-06-03&apos; ),
    PARTITION d20120604 ( END &apos;2012-06-04&apos; ),
    PARTITION d20120605 ( END &apos;2012-06-05&apos; ),
    PARTITION d20120606 ( END &apos;2012-06-06&apos; ),
    PARTITION d20120607 ( END &apos;2012-06-07&apos; ),
    PARTITION d20120608 ( END &apos;2012-06-08&apos; ),
    PARTITION d20120609 ( END &apos;2012-06-09&apos; ),
    PARTITION d20120610 ( END &apos;2012-06-10&apos; ),
    PARTITION d20120611 ( END &apos;2012-06-11&apos; ),
    PARTITION d20120612 ( END &apos;2012-06-12&apos; ),
    PARTITION d20120613 ( END &apos;2012-06-13&apos; ),
    PARTITION d20120614 ( END &apos;2012-06-14&apos; ),
    PARTITION d20120615 ( END &apos;2012-06-15&apos; ),
    PARTITION d20120616 ( END &apos;2012-06-16&apos; ),
    PARTITION d20120617 ( END &apos;2012-06-17&apos; ),
    PARTITION d20120618 ( END &apos;2012-06-18&apos; ),
    PARTITION d20120619 ( END &apos;2012-06-19&apos; ),
    PARTITION d20120620 ( END &apos;2012-06-20&apos; )
);

INSERT INTO TDcom_all_sessions300
SELECT *
FROM SessionizeAppend (
    ON TDcom_all
    PARTITION BY ip_address
    ORDER BY datestamp
    TIMECOLUMN (&apos;datestamp&apos;)
    TIMEOUT (300)
);

analyze TDcom_all_sessions300;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Inject load script" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">(echo &apos;${ASTER_WL_SH_LOAD_SCRIPT}&apos; &gt; ${BENCHMARK_PATH}/apps/weblogs/load_files.sh; chmod +x  ${BENCHMARK_PATH}/apps/weblogs/load_files.sh) ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/inject.${ASTER_DBNAME_WL}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL00: Load files (${ASTER_DBNAME_WL})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/weblogs/load_files.sh ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/load_files.${ASTER_DBNAME_WL}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL00: Parse (${ASTER_DBNAME_WL})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SH_PARSE_SCRIPT}&quot; | ${ASTER_ACT_WL_CL_PREFIX} -e ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/parse.${ASTER_DBNAME_WL}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL00: Sessionize (${ASTER_DBNAME_WL})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SH_SESSIONIZE_SCRIPT}&quot; | ${ASTER_ACT_WL_CL_PREFIX} -e ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/sessionize.${ASTER_DBNAME_WL}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL05" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_WL05}&quot; | ${ASTER_ACT_WL_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q1 users with most visits</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL06" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_WL06}&quot; | ${ASTER_ACT_WL_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q2 popular pages</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL07" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_WL07}&quot; | ${ASTER_ACT_WL_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q3 Unique visitors/day</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL08" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_WL08}&quot; | ${ASTER_ACT_WL_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q4 Unique visitors/wk</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL09" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_WL09}&quot; | ${ASTER_ACT_WL_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q5 Unique page/day</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL10" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_WL10}&quot; | ${ASTER_ACT_WL_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q6 Unique page/wk</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL11" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_WL11}&quot; | ${ASTER_ACT_WL_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q7 nPath popular clicks</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL12" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_WL12}&quot; | ${ASTER_ACT_WL_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q8 nPath popclick 3deep</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL13" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_WL13}&quot; | ${ASTER_ACT_WL_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q9 nPath popclick 5deep</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL14" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_WL_SQL_WL14}&quot; | ${ASTER_ACT_WL_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q10 nPath longsession/day</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WL15 (single-thread only)" enabled="true">
                <stringProp name="IfController.condition">${__jexl(${__P(BENCHMARK_USER_COUNT)} == 1)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <stringProp name="TestPlan.comments">needed to prevent deadlock with &gt; 1 user</stringProp>
              </IfController>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL15" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">echo &quot;${ASTER_WL_SQL_WL15}&quot; | ${ASTER_ACT_WL_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                  <stringProp name="TestPlan.comments">Q11 nPath/join first time visitors</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1702243900">${ASTER_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">0</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </SizeAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Hadoop" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_HADOOP)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="WL UDVs" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="WL_JOB_IN_DIR" elementType="Argument">
                <stringProp name="Argument.name">WL_JOB_IN_DIR</stringProp>
                <stringProp name="Argument.value">${HADOOP_HDFS_ROOT}/weblogs/teradata/iis/sessionize</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WL_JOB_TMP_DIR" elementType="Argument">
                <stringProp name="Argument.name">WL_JOB_TMP_DIR</stringProp>
                <stringProp name="Argument.value">${HADOOP_HDFS_ROOT}/weblogs/teradata/iis/tmp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WL_JOB_OUT_DIR" elementType="Argument">
                <stringProp name="Argument.name">WL_JOB_OUT_DIR</stringProp>
                <stringProp name="Argument.value">${HADOOP_HDFS_ROOT}/weblogs/output/analytics/distincts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WL_DATA_DIR" elementType="Argument">
                <stringProp name="Argument.name">WL_DATA_DIR</stringProp>
                <stringProp name="Argument.value">${HADOOP_HDFS_ROOT}/weblogs</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WL_RAW_DATA_DIR" elementType="Argument">
                <stringProp name="Argument.name">WL_RAW_DATA_DIR</stringProp>
                <stringProp name="Argument.value">${HADOOP_HDFS_ROOT}/raw/weblogs</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WL_MULTI_AGG_SPEC" elementType="Argument">
                <stringProp name="Argument.name">WL_MULTI_AGG_SPEC</stringProp>
                <stringProp name="Argument.value">distinctUserCounts,distinctPageCounts,distinctDailyUserCounts,distinctDailyPageCounts</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WL_SESSIONIZE_DATE" elementType="Argument">
                <stringProp name="Argument.name">WL_SESSIONIZE_DATE</stringProp>
                <stringProp name="Argument.value">2012-04-24</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${HIVE_EXEC} -e</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_COMPRESSION_PARM" elementType="Argument">
                <stringProp name="Argument.name">HIVE_COMPRESSION_PARM</stringProp>
                <stringProp name="Argument.value">SET hive.exec.compress.output=${HADOOP_COMPRESS}; 
SET mapred.output.compress=${HADOOP_COMPRESS};  
SET mapred.compress.map.output=${HADOOP_COMPRESS};
SET mapred.output.compression.codec=org.apache.hadoop.io.compress.SnappyCodec; 
SET mapred.map.output.compression.codec=org.apache.hadoop.io.compress.SnappyCodec;  
SET io.seqfile.compression.type=BLOCK; 
SET mapred.output.compression.type=BLOCK;  </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WL_HADOOP_MR_JAR" elementType="Argument">
                <stringProp name="Argument.name">WL_HADOOP_MR_JAR</stringProp>
                <stringProp name="Argument.value">${BENCHMARK_PATH}/apps/lib/aster-mr.jar</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="WL Hive Queries" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="HIVE_WL_HQL_WL5" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_WL5</stringProp>
                <stringProp name="Argument.value">
-- WL5c  Query 1: Distinct Users of site with most visits

select ipAddrs, count(*) as cnt
from td_sessions
group by ipAddrs
order by cnt desc
limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_HQL_WL6" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_WL6</stringProp>
                <stringProp name="Argument.value">
-- WL6c  Query 2:  Distinct Pages Visited

select page,count(*) as cnt
from td_sessions
group by page
order by cnt desc
limit 25;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_HQL_WL7" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_WL7</stringProp>
                <stringProp name="Argument.value">
-- WL7c  Query 3: Unique Visitors per Day

select visitDt, count(distinct(ipAddrs))
from td_sessions
group by visitDt
order by visitDt;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_HQL_WL8" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_WL8</stringProp>
                <stringProp name="Argument.value">
-- WL8c  Query 4: Unique Visitors per Week

SELECT weekofyear(visitDt)as wk,
year(visitDt) as yr,
count(distinct(ipAddrs)) as cnt
FROM td_sessions
GROUP BY weekofyear(visitDt), year(visitDt)
order by wk, yr;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_HQL_WL9" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_WL9</stringProp>
                <stringProp name="Argument.value">
-- WL9c  Query 5: Unique Pages viewed per Day

select visitDt, count(distinct page)
from td_sessions
group by visitDt
order by visitDt;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_HQL_WL10" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_WL10</stringProp>
                <stringProp name="Argument.value">
-- WL10c  Query 6: Unique Pages viewed per Week

SELECT weekofyear(visitDt)as wk,
year(visitDt) as yr,
count(distinct page) as cnt
FROM td_sessions
GROUP BY weekofyear(visitDt), year(visitDt)
order by wk, yr;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_HQL_TD_UNIQV_CREATE" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_TD_UNIQV_CREATE</stringProp>
                <stringProp name="Argument.value">
-- Create td_unique_visitors

drop table td_unique_visitors;
CREATE TABLE td_unique_visitors (
   firstVisitTs STRING, 
   ipAddrs STRING)
STORED AS RCFILE
;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_HQL_TD_UNIQV_LOAD" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_TD_UNIQV_LOAD</stringProp>
                <stringProp name="Argument.value">
-- Load td_unique_visitors

INSERT OVERWRITE TABLE td_unique_visitors
  SELECT min(visitTs), ipAddrs
   FROM td_sessions
   group by ipAddrs
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_HQL_TD_SESSIONS_DAILY_INSERT" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_TD_SESSIONS_DAILY_INSERT</stringProp>
                <stringProp name="Argument.value">
set hiveconf:date ;

INSERT OVERWRITE TABLE td_sessions PARTITION (visitDt=&apos;\${hiveconf:date}&apos;)
  SELECT visitTs,
         ipAddrs,
         page,
         referrer,
         searchTerms,
         sessionid
  FROM td_sessions_temp
  WHERE to_date(visitTs) = &apos;\${hiveconf:date}&apos;
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_HQL_WL15" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_WL15</stringProp>
                <stringProp name="Argument.value">set hiveconf:date ;

SELECT count(distinct case when v.ipAddrs is null then s.ipAddrs end) as newVisitorCnt,
count(distinct case when v.ipAddrs is not null then v.ipAddrs end) as returnVisitorCnt
from td_unique_visitors v
right outer join td_sessions s
ON(s.ipAddrs = v.ipAddrs)
WHERE s.visitDt=&apos;\${hiveconf:date}&apos;
;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_HQL_TD_SESSIONS_CREATE" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_TD_SESSIONS_CREATE</stringProp>
                <stringProp name="Argument.value">CREATE EXTERNAL TABLE td_sessions_temp (
   visitTs STRING, 
   ipAddrs STRING, 
   page STRING, 
   referrer STRING,
   searchTerms STRING,
   sessionid INT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY &apos;\t&apos; LINES TERMINATED BY &apos;\n&apos;
STORED AS TEXTFILE
LOCATION &apos;${HADOOP_HDFS_ROOT}/weblogs/teradata/iis/sessionize&apos;
;

CREATE TABLE td_sessions (
   visitTs STRING, 
   ipAddrs STRING, 
   page STRING, 
   referrer STRING,
   searchTerms STRING,
   sessionid INT)
PARTITIONED BY (visitDt STRING)
STORED AS RCFILE
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_WL_HQL_TD_SESSIONS_INSERT" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WL_HQL_TD_SESSIONS_INSERT</stringProp>
                <stringProp name="Argument.value">SET hive.exec.dynamic.partition.mode=nonstrict; SET hive.exec.dynamic.partition=true; SET hive.exec.max.dynamic.partitions=500; SET hive.exec.max.dynamic.partitions.pernode=500; SET mapred.reduce.tasks=50;  INSERT OVERWRITE TABLE td_sessions PARTITION (visitDt)   SELECT visitTs,          ipAddrs,          page,          referrer,          searchTerms,          sessionid,          to_date(visitTs) as visitDt   FROM td_sessions_temp DISTRIBUTE BY visitDt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create DB (???)" enabled="true">
                <stringProp name="hostname"></stringProp>
                <intProp name="port">0</intProp>
                <stringProp name="username"></stringProp>
                <stringProp name="password"></stringProp>
                <stringProp name="command"></stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL00: Load files" enabled="true">
                <stringProp name="hostname">10.25.34.46</stringProp>
                <intProp name="port">22</intProp>
                <stringProp name="username">bms</stringProp>
                <stringProp name="password">tdc</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/weblogs_load.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL00: Parse files" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/weblogs_parse.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL00: Sessionize logs" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/weblogs_sessionize.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL00: Load Hive" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/weblogs_load_hive.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL00: Load td_sessions table" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/weblogs_load_td_sessions_hive.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Compute Multi-aggregates (once only)" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Compute aggregates" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/compute_multiple_aggregates.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL05" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/run_query.sh WL05 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL06" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/run_query.sh WL06 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL07" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/run_query.sh WL07 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">Q3: Unique Visitors per Day</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL08" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/run_query.sh WL08 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">Q4: Unique Visitors per Week</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL09" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/run_query.sh WL09 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">Q5: Unique Pages viewed per Day</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL10" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/run_query.sh WL10 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">Q6: Unique Pages viewed per Week</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL11" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/compute_path_metrics.sh 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">compute path metrics</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL12" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/compute_path_metrics_path3.sh 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">compute path metrics with queryType = mostPopularStartingPath3</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL13" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/compute_path_metrics_path5.sh 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">compute path metrics with queryType = mostPopularStartingPath5</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL14" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/compute_path_metrics_longestsession.sh 2&gt;&amp;1</stringProp>
                <stringProp name="TestPlan.comments">compute path metrics wit query type = longest session</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="WL15 (single-thread only)" enabled="true">
                <stringProp name="IfController.condition">${__jexl(${__P(BENCHMARK_USER_COUNT)} == 1)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <stringProp name="TestPlan.comments">Exclude when running above concurrency=1 (mirror Aster fix to prevent deadlock for comparability)</stringProp>
              </IfController>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="WL15" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/weblogs/hadoop/create_unique_visitors.sh 2&gt;&amp;1</stringProp>
                  <stringProp name="TestPlan.comments">Create td_unique_visitors</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">0</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </SizeAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ADW (retail)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(BMS_ADW_LOOP_COUNT)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(BMS_USER_COUNT)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(BMS_RAMP_UP_SEC)}</stringProp>
        <longProp name="ThreadGroup.start_time">1318848428000</longProp>
        <longProp name="ThreadGroup.end_time">1318848428000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Aster" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_ASTER)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ADW UDVs" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_ACT_ADW_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ACT_ADW_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${ASTER_ACT_EXEC} -d ${ASTER_DBNAME_ADW} -U ${ASTER_ACT_UID} -w ${ASTER_ACT_PWD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_LOADER_ADW_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">ASTER_LOADER_ADW_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${ASTER_LOADER_EXEC} -d ${ASTER_DBNAME_ADW} -U ${ASTER_ACT_UID} -w ${ASTER_ACT_PWD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ADW Queries" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_ADW_SQL_R02" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ADW_SQL_R02</stringProp>
                <stringProp name="Argument.value">-- Q1 (R02) -  Profitability by item  2wjoin  
SELECT I_ITEM_NAME, PREV, &quot;COST&quot;, PREV-&quot;COST&quot; AS MARGIN 
FROM ( SELECT upper(I.ITEM_NAME) AS I_ITEM_NAME, SUM(STL.UNIT_SELLING_PRICE_AMT)/90 AS PREV, SUM(STL.UNIT_COST_AMT)/90 AS &quot;COST&quot;  FROM ITEM I, SALES_TRANSACTION_LINE STL 
WHERE STL.TRAN_LINE_DATE &lt; DATE &apos;2005-06-30&apos; AND STL.TRAN_LINE_DATE &gt;= DATE &apos;2005-04-01&apos; AND STL.ITEM_ID = CAST(I.ITEM_ID AS BIGINT) GROUP BY 1  ) AS TEMP;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_ADW_SQL_R03" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ADW_SQL_R03</stringProp>
                <stringProp name="Argument.value">-- Q2 (R03)  Avg # of days for typical return  3wjoin
-- MACRO Q12 
SELECT I.ITEM_NAME \&quot;PRODUCT NAME\&quot;,
SUM(cast(R.RETURN_TRAN_LINE_START_DTTM as date) - S.TRAN_LINE_DATE)/COUNT(S.SALES_TRAN_ID) \&quot;AVE DAYS FOR RETURN\&quot;
FROM SALES_TRANSACTION_LINE S, RETURN_TRANSACTION_LINE R, ITEM I
WHERE
R.ORIGINAL_SALES_TRAN_ID = S.SALES_TRAN_ID
AND R.RETURNED_ITEM_ID = 4119689102
AND R.RETURNED_ITEM_ID = S.ITEM_ID
AND I.ITEM_ID = &apos;4119689102&apos;
AND S.ITEM_ID = 4119689102
AND CAST(R.Return_Tran_Line_Start_Dttm AS DATE) &gt;= &apos;2004-01-01&apos;
GROUP BY 1;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_ADW_SQL_R04" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ADW_SQL_R04</stringProp>
                <stringProp name="Argument.value">-- Q3 (R04) revenue by district &amp; time period  4wjoin  
-- MACRO Q30 from ../MACRO_2012_03_08.sql
SELECT D.DISTRICT_NAME \&quot;DISTRICT NAME\&quot;, &apos;2005-04 TO 2005-06&apos; \&quot;PERIOD\&quot;,SUM(S.MKB_REV_AMT) \&quot;90 DAYS REVENUE\&quot;
FROM
LOCATION L, ASSOCIATE A, SALES_TRANSACTION S, DISTRICT D
WHERE
S.TRAN_DATE BETWEEN &apos;2005-04-01&apos; AND &apos;2005-06-30&apos;
AND D.DISTRICT_CD = &apos;D104&apos;
AND S.ASSOCIATE_PARTY_ID = A.ASSOCIATE_PARTY_ID
AND A.LOCATION_ID = L.LOCATION_ID
AND L.DISTRICT_CD = D.DISTRICT_CD
GROUP BY 1,2
ORDER BY 3 DESC
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_ADW_SQL_R05" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ADW_SQL_R05</stringProp>
                <stringProp name="Argument.value">-- Q4 (R05) local aggr #of salestx lines per tx id
-- local aggregation. Find number of sales transaction lines per transaction id.
select count(*) from (select count(*)  from sales_transaction_line
  group by sales_tran_id) LocalAgg;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_ADW_SQL_R06" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ADW_SQL_R06</stringProp>
                <stringProp name="Argument.value">-- Q5 (R06) global aggr  # of salestx lines for each item
-- global aggregation. Find number of sales transaction lines for each item.
select count(*) from (select count(*)  from sales_transaction_line
  group by item_id) GlobalAgg;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_ADW_SQL_R07" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ADW_SQL_R07</stringProp>
                <stringProp name="Argument.value">-- Q6 (R07) global aggr  # of salestx lines for specific tx 
-- Find number of sales transaction lines for a specific transaction 
select count(*)  from sales_transaction_line
  where  sales_tran_id = 197246635;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_ADW_SQL_R08" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ADW_SQL_R08</stringProp>
                <stringProp name="Argument.value">-- Q7 (R08)  having clause.  items with minimum tx lines
select item_id, count(*) from sales_transaction_line group by item_id
  having count(*) =
      (select min(cnt) from
         (select count(*) as cnt from sales_transaction_line group by item_id
         ) itemmcnt
      )
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_ADW_SQL_R09" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ADW_SQL_R09</stringProp>
                <stringProp name="Argument.value">-- Q8 (R09) npath
SELECT distinct location, trim(item)
FROM nPath (
     ON item_inventory
     PARTITION BY location_id, item_id
     ORDER BY item_inv_dt
     PATTERN (&apos;OutOfStock+&apos;)
     MODE (NONOVERLAPPING)
     SYMBOLS (on_hand_at_retail_amt = 0  as OutOfStock)
     RESULT
     (
        first (location_id of OutOfStock) as location,
        first (item_id of OutOfStock) as item,
        COUNT(* of OutOfStock) as depth
     )
)
where depth &gt; 10
order by 1,2;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ADW DDL" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ASTER_ADW_SQL_CREATE_DB" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ADW_SQL_CREATE_DB</stringProp>
                <stringProp name="Argument.value">CREATE DATABASE adw;

</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_ADW_SQL_CREATE_TABLES" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ADW_SQL_CREATE_TABLES</stringProp>
                <stringProp name="Argument.value">-- migrated from 7QRetailCreates.AD.sh

DROP TABLE IF EXISTS ASSOCIATE;
CREATE TABLE ASSOCIATE
(
	ASSOCIATE_PARTY_ID NUMERIC(10,0),
	MANAGER_ASSOCIATE_ID NUMERIC(10,0),
	POSITION_ID NUMERIC(10,0),
	LOCATION_ID NUMERIC(10,0),
	ASSOC_HR_NUM CHARACTER VARYING(50),
	ASSOC_HIRE_DT CHARACTER(10),
	ASSOC_TERMINATION_DT CHARACTER(10)
)
DISTRIBUTE BY REPLICATION;

DROP TABLE IF EXISTS DISTRICT;
CREATE TABLE DISTRICT
(
	DISTRICT_CD CHARACTER VARYING(50),
	DISTRICT_NAME CHARACTER VARYING(100),
	REGION_CD CHARACTER VARYING(50),
	DISTRICT_MGR_ASSOCIATE_ID NUMERIC(10,0)
)
DISTRIBUTE BY REPLICATION;

DROP TABLE IF EXISTS ITEM;
CREATE TABLE ITEM
(
	ITEM_ID CHARACTER VARYING(20),                                   
	ITEM_NAME CHARACTER VARYING(100),             
	ITEM_DESC CHARACTER VARYING(250),             
	ITEM_SUBCLASS_CD CHARACTER VARYING(50),       
	ITEM_TYPE_CD CHARACTER VARYING(50),           
	INVENTORY_IND CHARACTER(3),                   
	VENDOR_PARTY_ID NUMERIC(10,0),                
	COMMODITY_CD CHARACTER VARYING(50),           
	BRAND_CD CHARACTER VARYING(50)
)
DISTRIBUTE BY REPLICATION;

DROP TABLE IF EXISTS INVENTORY;
CREATE TABLE ITEM_INVENTORY
(
	LOCATION_ID NUMERIC(18,0),
	ITEM_INV_DT TIMESTAMP,
	ITEM_ID CHARACTER VARYING(20),
	ON_HAND_UNIT_QTY NUMERIC(18,0),
	ON_HAND_AT_RETAIL_AMT NUMERIC(18,2),
	ON_HAND_COST_AMT NUMERIC(18,2),
	ON_ORDER_QTY NUMERIC(18,0),
	LOST_SALES_DAY_IND CHARACTER VARYING(3)
)
DISTRIBUTE BY HASH (LOCATION_ID);

DROP TABLE IF EXISTS LOCATION;
CREATE TABLE LOCATION
(
	LOCATION_ID NUMERIC(10,0) NOT NULL,
	LOCATION_NAME CHARACTER(40),
	LOCATION_OPEN_DT CHARACTER(10),
	LOCATION_CLOSE_DT CHARACTER(10),
	LOCATION_EFFECTIVE_DT CHARACTER(10),
	LOCATION_TOTAL_AREA_MEAS NUMERIC(18,4),
	CHAIN_CD CHARACTER VARYING(50),
	CHANNEL_CD CHARACTER VARYING(50),
	DISTRICT_CD CHARACTER VARYING(50),
	PARENT_LOCATION_ID NUMERIC(10,0),
	LOCATION_MGR_ASSOCIATE_ID NUMERIC(10,0),
	LOCATION_TYPE_CD CHARACTER VARYING(50)
)
DISTRIBUTE BY REPLICATION;

DROP TABLE IF EXISTS RETURN_TRANSACTION_LINE;
CREATE TABLE RETURN_TRANSACTION_LINE
(
        SALES_TRAN_ID BIGINT,
        RETURN_TRAN_LINE_NUM INT,
        RETURNED_ITEM_ID BIGINT,
        RETURN_ITEM_QTY INT,
        UNIT_REFUND_AMT NUMERIC(18,2),
        ORIGINAL_SALES_TRAN_ID BIGINT,
        ORIGINAL_SALES_TRAN_LINE_NUM BIGINT,
        RETURN_TRAN_LINE_START_DTTM TIMESTAMP,
        RETURN_TRAN_LINE_END_DTTM TIMESTAMP,
        TRAN_LINE_STATUS_CD CHARACTER VARYING(5),
        RETURN_REASON_CD CHARACTER VARYING(5),
        LOCATION INT
)
DISTRIBUTE BY HASH (ORIGINAL_SALES_TRAN_ID);

DROP TABLE IF EXISTS SALES_TRANSACTION;
CREATE TABLE SALES_TRANSACTION
(
   SALES_TRAN_ID NUMERIC(18,0),
   VISIT_ID NUMERIC(18,0),
   TRAN_STATUS_CD CHARACTER(1),
    REPORTED_AS_DTTM timestamp(6),
    TRAN_TYPE_CD   char(1),
   MKB_COST_AMT NUMERIC(18,2),
   MKB_ITEM_QTY NUMERIC(18,0),
   MKB_NUMERIC_UNIQUE_ITEMS_QTY NUMERIC(3,0),
   MKB_REV_AMT NUMERIC(18,2),
   ASSOCIATE_PARTY_ID NUMERIC(18,0),
   TRAN_START_DTTM_DD TIMESTAMP,
   TRAN_DATE DATE,
   TRAN_END_DTTM_DD TIMESTAMP,
   TRAN_END_HOUR NUMERIC(2,0),
   TRAN_END_MINUTE NUMERIC(2,0),
   REWARD_CD CHARACTER VARYING(10)
)
DISTRIBUTE BY HASH (SALES_TRAN_ID)
${STORAGE_ADW_LAYOUT}
${STORAGE_ADW_COMPRESSION}
PARTITION BY RANGE (tran_date NULLS FIRST)
(
 PARTITION p01  (END date&apos;2004-01-01&apos;),
 PARTITION p02  (END date&apos;2004-04-01&apos;),
 PARTITION p03  (END date&apos;2004-07-01&apos;),
 PARTITION p04  (END date&apos;2004-10-01&apos;),
 PARTITION p05  (END date&apos;2005-01-01&apos;),
 PARTITION p06  (END date&apos;2005-04-01&apos;),
 PARTITION p07  (END date&apos;2005-07-01&apos;),
 PARTITION p08  (END date&apos;2005-10-01&apos;)
);


DROP TABLE IF EXISTS SALES_TRANSACTION_LINE;
CREATE TABLE SALES_TRANSACTION_LINE
(
   SALES_TRAN_ID bigint,
   SALES_TRAN_LINE_NUM int,
   ITEM_ID bigint,                           
   ITEM_QTY VARCHAR(5),                     
   UNIT_SELLING_PRICE_AMT NUMERIC(18,2),
   UNIT_COST_AMT NUMERIC(18,2),
   TRAN_LINE_STATUS_CD CHARACTER VARYING(5),
   SALES_TRAN_LINE_START_DTTM TIMESTAMP,
   TRAN_LINE_SALES_TYPE_CD CHARACTER VARYING(5),
   SALES_TRAN_LINE_END_DTTM TIMESTAMP,
   TRAN_LINE_DATE date,
   LOCATION int,
   TX_TIME  varchar(12)
)
DISTRIBUTE BY HASH (SALES_TRAN_ID)
${STORAGE_ADW_LAYOUT}
${STORAGE_ADW_COMPRESSION}
PARTITION BY RANGE (tran_line_date NULLS FIRST)
(
 PARTITION p01  (END date&apos;2004-01-01&apos;),
 PARTITION p02  (END date&apos;2004-04-01&apos;),
 PARTITION p03  (END date&apos;2004-07-01&apos;),
 PARTITION p04  (END date&apos;2004-10-01&apos;),
 PARTITION p05  (END date&apos;2005-01-01&apos;),
 PARTITION p06  (END date&apos;2005-04-01&apos;),
 PARTITION p07  (END date&apos;2005-07-01&apos;),
 PARTITION p08  (END date&apos;2005-10-01&apos;)
);

</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ASTER_ADW_SQL_INSTALL_FUNCTIONS" elementType="Argument">
                <stringProp name="Argument.name">ASTER_ADW_SQL_INSTALL_FUNCTIONS</stringProp>
                <stringProp name="Argument.value">\remove npath.jar;
\install ${BENCHMARK_PATH}/apps/adw/mr_functions/npath.jar;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create DB (${ASTER_DBNAME_ADW})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_ADW_SQL_CREATE_DB}&quot; | ${ASTER_ACT_EXEC} -d beehive -U ${ASTER_ACT_UID} -w ${ASTER_ACT_PWD} ${CL_STDERR_REDIR} | tee -a ${BENCHMARK_OUTPUT_PATH}/install.functions.${ASTER_DBNAME_ADW}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create tables (${ASTER_DBNAME_ADW})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_ADW_SQL_CREATE_TABLES}&quot; | ${ASTER_ACT_ADW_CL_PREFIX} ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/create.tables.${ASTER_DBNAME_ADW}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Install functions (${ASTER_DBNAME_ADW})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_ADW_SQL_INSTALL_FUNCTIONS}&quot; | ${ASTER_ACT_ADW_CL_PREFIX} ${CL_STDERR_REDIR}  |  tee -a ${BENCHMARK_OUTPUT_PATH}/install.functions.${ASTER_DBNAME_ADW}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1702243900">${ASTER_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Load scripts" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ASTER_ADW_SH_LOAD_SCRIPT" elementType="Argument">
                  <stringProp name="Argument.name">ASTER_ADW_SH_LOAD_SCRIPT</stringProp>
                  <stringProp name="Argument.value">cat &lt;&lt;EOF3 &gt; ${BENCHMARK_PATH}/apps/adw/load_files.sh ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/inject.${ASTER_DBNAME_ADW}.${__P(BENCHMARK_RUN_ID)}.log
# migrated from load8tables.sh
set -o nounset
set -o pipefail

cd ${ASTER_INPUT_FILE_DIR}/adw

COMPRESSED=${EXEC_APP_COMPRESS_ADW}

if ${EXEC_APP_COMPRESS_ADW} ; then
    echo &quot;Compressed&quot;
    echo &quot;[\\$(date)] start ETL&quot;
    echo &quot;[\\$(date)] start return_transaction_line&quot;
    gzip -d -c return_transaction_line.csv.gz | ${ASTER_LOADER_ADW_CL_PREFIX} -a -c return_transaction_line
    echo &quot;[\\$(date)] start Item&quot;
    gzip -d -c item.csv.gz | ${ASTER_LOADER_ADW_CL_PREFIX} -a -c item
    echo &quot;[\\$(date)] start district                   &quot;
    gzip -d -c district.csv.gz | ${ASTER_LOADER_ADW_CL_PREFIX} -a -c district
    echo &quot;[\\$(date)] start SALES_TRANSACTION &quot;
    gzip -d -c SALES_TRANSACTION.csv.gz | ${ASTER_LOADER_ADW_CL_PREFIX} -a -c sales_transaction
    echo &quot;[\\$(date)] start location &quot;
    gzip -d -c location.csv.gz | ${ASTER_LOADER_ADW_CL_PREFIX} -a -c location
    echo &quot;[\\$(date)] start ITEM_INVENTORY &quot;
    gzip -d -c ITEM_INVENTORY.csv.gz | ${ASTER_LOADER_ADW_CL_PREFIX} -a -c item_inventory
    echo &quot;[\\$(date)] start ASSOCIATE                  &quot;
    gzip -d -c ASSOCIATE.csv.gz | ${ASTER_LOADER_ADW_CL_PREFIX} -a -c associate
else
    echo &quot;Uncompressed&quot;
    echo $COMPRESSED
    echo &quot;[\\$(date)] start ETL&quot;
    echo &quot;[\\$(date)] start return_transaction_line&quot;
    ${ASTER_LOADER_ADW_CL_PREFIX} -c return_transaction_line --verbose return_transaction_line.csv
    echo &quot;[\\$(date)] start Item&quot;
    ${ASTER_LOADER_ADW_CL_PREFIX} -a -c item item.csv
    echo &quot;[\\$(date)] start district                   &quot;
    ${ASTER_LOADER_ADW_CL_PREFIX} -a -c district district.csv
    echo &quot;[\\$(date)] start SALES_TRANSACTION &quot;
    ${ASTER_LOADER_ADW_CL_PREFIX} -a -c sales_transaction  sales_transaction.csv
    echo &quot;[\\$(date)] start location &quot;
    ${ASTER_LOADER_ADW_CL_PREFIX} -a -c location  location.csv
    echo &quot;[\\$(date)] start ITEM_INVENTORY &quot;
    ${ASTER_LOADER_ADW_CL_PREFIX} -a -c item_inventory  item_inventory.csv
    echo &quot;[\\$(date)] start ASSOCIATE                  &quot;
    ${ASTER_LOADER_ADW_CL_PREFIX} -a -c associate associate.csv
fi

echo &quot;[\\$(date)] start sales_transaction_line     &quot;

#${BENCHMARK_PATH}/apps/adw/loadstl.sh 
#----------------------------
tags=&quot;a b c d e f g h i j k l m n&quot;
for tag in \\$tags
do
    mknod xa\\${tag}p p
done

for tag in \\$tags
do
    awk &apos;BEGIN {FS=&quot;,&quot;} {printf(&quot;%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n&quot;,\\$1,\\$2,\\$3,substr(\\$4,1,1),\\$5,\\$6,\\$7,\\$8,\\$9,\\$10,\\$11,\\$12,\\$13);}&apos; xa\\${tag} &gt; xa\\${tag}p &amp;
    sleep 1
    ${ASTER_LOADER_ADW_CL_PREFIX} -a -c sales_transaction_line xa\\${tag}p &amp;
done
#----------------------------

sleep 60

eql=1
while  [ \\$eql -gt 0 ]
do
   sleep 5
   eql=`ps -ef | grep ncluster_loader | grep -v grep | awk {&apos;printf $2&quot;\n&quot;;&apos;} | wc -l`
done 

echo &quot;[\\$(date)] end sales_transaction_line     &quot;

echo &quot;[\\$(date)] start indices     &quot;
# indices.sh 
${ASTER_ACT_ADW_CL_PREFIX} -e ${CL_STDERR_REDIR} &lt;&lt;EOF
\timing on
\echo &apos;Starting indexes &apos;
CREATE INDEX sales_transaction_line_nidx1 ON sales_transaction_line (item_id);
CREATE INDEX sales_transaction_line_nidx2 ON sales_transaction_line (sales_tran_id);
CREATE INDEX sales_transaction_line_nidx3 ON sales_transaction_line (tran_line_date);
CREATE INDEX sales_transaction_line_nidx4 ON sales_transaction_line (location);
CREATE INDEX sales_transaction_idx1 ON sales_transaction (tran_date);
CREATE INDEX sales_transaction_idxt ON sales_transaction (sales_tran_id);
CREATE INDEX sales_transaction_idx2 ON sales_transaction (associate_party_id);
CREATE INDEX return_transaction_line_idx1 ON return_transaction_line (original_sales_tran_id);
CREATE INDEX return_transaction_line_idx2 ON return_transaction_line (return_tran_line_start_dttm);
CREATE INDEX xpkreturn_transaction_line ON return_transaction_line (sales_tran_id);
CREATE INDEX item_inventory_idx1 ON item_inventory (item_inv_dt);
CREATE INDEX xpkitem_inventory ON item_inventory (location_id,item_inv_dt,item_id);
CREATE INDEX xpklocation ON location (location_id);
CREATE INDEX location_district_fk ON location (district_cd);
CREATE INDEX xpkassociate ON associate (associate_party_id);
CREATE INDEX associate_idx1 ON associate (location_id);
CREATE INDEX xpitem ON item (item_id);
CREATE INDEX xpkdistrict ON district (district_cd);
CREATE INDEX district_region_fk ON district (region_cd);
\echo &apos;Ending indexes &apos;
EOF

echo &quot;[\\$(date)] start analyze     &quot;
# analyzeall.sh

${ASTER_ACT_ADW_CL_PREFIX} -e ${CL_STDERR_REDIR} &lt;&lt;EOF
ANALYZE associate;
ANALYZE district;
ANALYZE item;
ANALYZE item_inventory;
ANALYZE location;
ANALYZE sales_transaction;
ANALYZE return_transaction_line;
EOF

echo &quot;[\\$(date)] end ETL&quot;
#/data/retail/clearcache.sh
EOF3

chmod +x  ${BENCHMARK_PATH}/apps/adw/load_files.sh ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/inject.${ASTER_DBNAME_ADW}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Inject scripts" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${ASTER_ADW_SH_LOAD_SCRIPT}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Load files (${ASTER_DBNAME_ADW})" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/adw/load_files.sh ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/load_files.${ASTER_DBNAME_ADW}.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1702243900">${ASTER_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">0</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </SizeAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R02" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_ADW_SQL_R02}&quot; | ${ASTER_ACT_ADW_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q1: Profitability by item  2wjoin</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R03" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_ADW_SQL_R03}&quot; | ${ASTER_ACT_ADW_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q2: Avg # of days for typical return 3wjoin</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R04" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_ADW_SQL_R04}&quot; | ${ASTER_ACT_ADW_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q3: revenue by district &amp; time period 4wjoin  </stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R05" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_ADW_SQL_R05}&quot; | ${ASTER_ACT_ADW_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q4: local aggr #of salestx lines per tx id</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R06" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_ADW_SQL_R06}&quot; | ${ASTER_ACT_ADW_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q5: global aggregation. Find number of sales transaction lines for each item.</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R07" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_ADW_SQL_R07}&quot; | ${ASTER_ACT_ADW_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q6: lookup on sales_tran_id. Index access on sales_tran_id used.</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R08" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_ADW_SQL_R08}&quot; | ${ASTER_ACT_ADW_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q7: having clause query. Find items with minimum transaction lines.</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R09" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">echo &quot;${ASTER_ADW_SQL_R09}&quot; | ${ASTER_ACT_ADW_CL_PREFIX} ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="TestPlan.comments">Q8: npath query</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1702243900">${ASTER_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">0</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </SizeAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Hadoop" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_HADOOP)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ADW Hive Queries" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="HIVE_ADW_HQL_R02" elementType="Argument">
                <stringProp name="Argument.name">HIVE_ADW_HQL_R02</stringProp>
                <stringProp name="Argument.value">SELECT
    I_ITEM_NAME,
    PREV,
    COST,
    PREV-COST AS MARGIN
FROM
(SELECT
    upper(I.ITEM_NAME) AS I_ITEM_NAME,
    SUM(STL.UNIT_SELLING_PRICE_AMT)/90 AS PREV,
    SUM(STL.UNIT_COST_AMT)/90 AS COST 
    FROM
        adw_item I JOIN adw_sales_transaction_line STL
    ON (
        STL.TRAN_DATE_P &lt; &apos;2005-06-30&apos;
        AND STL.TRAN_DATE_P &gt;= &apos;2005-04-01&apos;
        AND STL.ITEM_ID = I.ITEM_ID)
    GROUP BY upper(I.ITEM_NAME) 
) TEMP;

</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_ADW_HQL_R03" elementType="Argument">
                <stringProp name="Argument.name">HIVE_ADW_HQL_R03</stringProp>
                <stringProp name="Argument.value">SELECT 
    I.ITEM_NAME AS PRODUCT_NAME,
    SUM(datediff(to_date(R.RETURN_TRAN_LINE_START_DTTM),S.TRAN_DATE_P))/COUNT(S.SALES_TRAN_ID) AS AVE_DAYS_FOR_RETURN 
FROM 
    adw_item I 
    JOIN adw_return_transaction_line R ON (
        I.ITEM_ID = &apos;4119689102&apos;
        AND trim(R.RETURNED_ITEM_ID) = &apos;4119689102&apos;
        AND to_date(R.Return_Tran_Line_Start_Dttm) &gt;= &apos;2004-01-01&apos;
    )
    JOIN adw_sales_transaction_line S ON (
        trim(R.RETURNED_ITEM_ID) = trim(S.ITEM_ID)
        AND R.ORIGINAL_SALES_TRAN_ID = S.SALES_TRAN_ID
    )
GROUP BY I.ITEM_NAME;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_ADW_HQL_R04" elementType="Argument">
                <stringProp name="Argument.name">HIVE_ADW_HQL_R04</stringProp>
                <stringProp name="Argument.value">SELECT 
    D.DISTRICT_NAME AS DISTRICT_NAME, 
    &apos;2005-04 TO 2005-06&apos; AS PERIOD,
    SUM(S.MKB_REV_AMT) AS 90_DAYS_REVENUE
FROM
    adw_district D
    JOIN adw_location L ON (D.DISTRICT_CD = &apos;D104&apos; AND D.DISTRICT_CD = L.DISTRICT_CD)
    JOIN adw_associate A ON (L.LOCATION_ID = A.LOCATION_ID)
    JOIN adw_sales_transaction S ON (
        S.TRAN_DATE_P &gt;= &apos;2005-04-01&apos; AND S.TRAN_DATE_P &lt;=&apos;2005-06-30&apos;
        AND S.ASSOCIATE_PARTY_ID = A.ASSOCIATE_PARTY_ID
    )
GROUP BY 
    D.DISTRICT_NAME,&apos;2005-04 TO 2005-06&apos;
ORDER BY 90_DAYS_REVENUE DESC
;


</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_ADW_HQL_R05" elementType="Argument">
                <stringProp name="Argument.name">HIVE_ADW_HQL_R05</stringProp>
                <stringProp name="Argument.value">SELECT count(*)  FROM (     
    SELECT count(*)     
    FROM          adw_sales_transaction_line     
    GROUP BY         sales_tran_id     
) LocalAgg ;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_ADW_HQL_R06" elementType="Argument">
                <stringProp name="Argument.name">HIVE_ADW_HQL_R06</stringProp>
                <stringProp name="Argument.value">SELECT count(*)  FROM (
    SELECT count(*)
    FROM          adw_sales_transaction_line     
    GROUP BY         item_id
) GlobalAgg ;  </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_ADW_HQL_R07" elementType="Argument">
                <stringProp name="Argument.name">HIVE_ADW_HQL_R07</stringProp>
                <stringProp name="Argument.value">SELECT count(*) 
FROM 
    adw_sales_transaction_line
WHERE
    sales_tran_id = 197246635
;

</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_ADW_HQL_R08" elementType="Argument">
                <stringProp name="Argument.name">HIVE_ADW_HQL_R08</stringProp>
                <stringProp name="Argument.value">set hive.auto.convert.join=false; CREATE VIEW adw_item_cnt(item_id, cnt) AS SELECT item_id, count(*) as cnt FROM adw_sales_transaction_line GROUP BY item_id;  SELECT A.item_id, A.cnt FROM  adw_item_cnt A  JOIN  (SELECT min(cnt) AS m FROM adw_item_cnt) B  ON (A.cnt = B.m);  DROP VIEW adw_item_cnt; </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_ADW_HQL_R09" elementType="Argument">
                <stringProp name="Argument.name">HIVE_ADW_HQL_R09</stringProp>
                <stringProp name="Argument.value">DROP TABLE nPATH_reduce; 
CREATE TABLE nPATH_reduce (LOCATION_ID string, ITEM string) 
     STORED AS sequencefile;  

ADD FILE \\${hiveconf:scriptPath}; FROM (
    SELECT CONCAT_WS(&apos; &apos;, CAST(location_id AS STRING), item_id) AS K,
    item_inv_dt as dt,  		
    on_hand_at_retail_amt as amt 	
    FROM adw_item_inventory 	
    DISTRIBUTE BY K 	
    SORT BY K,dt
) map_out 
INSERT OVERWRITE TABLE nPATH_reduce REDUCE map_out.K, map_out.dt, map_out.amt USING &apos;python npathreducer.py&apos; AS LOCATION_ID,ITEM; </stringProp>
                <stringProp name="command">${HIVE_EXEC} -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_ADW)} ${HIVE_ADW_HQL_R09}&quot; ${CL_STDERR_REDIR}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_ADW_HQL_LOAD_SLS_TXN" elementType="Argument">
                <stringProp name="Argument.name">HIVE_ADW_HQL_LOAD_SLS_TXN</stringProp>
                <stringProp name="Argument.value">SET hive.exec.dynamic.partition.mode=nonstrict;
SET hive.exec.dynamic.partition=true;
SET mapred.child.java.opts=-Xmx2048m;
SET hive.mapred.reduce.tasks.speculative.execution=false;

INSERT OVERWRITE TABLE ADW_sales_transaction PARTITION (TRAN_DATE_P)
  SELECT 
        SALES_TRAN_ID,
        VISIT_ID,
        TRAN_STATUS_CD, 
        REPORTED_AS_DTTM,
        TRAN_TYPE_CD,
        MKB_COST_AMT,
        MKB_ITEM_QTY,
        MKB_NUMERIC_UNIQUE_ITEMS_QTY,
        MKB_REV_AMT,
        ASSOCIATE_PARTY_ID,
        TRAN_START_DTTM_DD,
        TRAN_END_DTTM_DD,
        TRAN_END_HOUR,
        TRAN_END_MINUTE,
        REWARD_CD,
        TRAN_DATE as TRAN_DATE_P
  FROM ADW_sales_transaction_temp
DISTRIBUTE BY TRAN_DATE_P
;

</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="HIVE_ADW_HQL_LOAD_SLS_TXN_LINE" elementType="Argument">
                <stringProp name="Argument.name">HIVE_ADW_HQL_LOAD_SLS_TXN_LINE</stringProp>
                <stringProp name="Argument.value">SET hive.exec.dynamic.partition.mode=nonstrict;
SET hive.exec.dynamic.partition=true;
SET mapred.child.java.opts=-Xmx2048m;
SET hive.mapred.reduce.tasks.speculative.execution=false;

INSERT OVERWRITE TABLE ADW_sales_transaction_line PARTITION (TRAN_DATE_P)
  SELECT        
        SALES_TRAN_ID,                      
        SALES_TRAN_LINE_NUM,                 
        ITEM_ID,                    
        ITEM_QTY,                    
        UNIT_SELLING_PRICE_AMT,             
        UNIT_COST_AMT,                      
        TRAN_LINE_STATUS_CD,         
        SALES_TRAN_LINE_START_DTTM,             
        TRAN_LINE_SALES_TYPE_CD,     
        SALES_TRAN_LINE_END_DTTM,               
        LOCATION_ID,                   
        TX_TIME,
        TRAN_LINE_DATE as TRAN_DATE_P
  FROM ADW_sales_transaction_line_temp
DISTRIBUTE BY TRAN_DATE_P
;

</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Ensure correct use of shell escapes. This is key for Hive parameter references like ${hiveconf:xyz}, which must be escaped as \${hiveconf:xyz} to keep the remote shell from resolving it before it is passed to Hive</stringProp>
          </Arguments>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Clear HDFS data" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">. ${BENCHMARK_PATH}/exports.sh; ${BENCHMARK_PATH}/apps/adw/hadoop/clear_hdfs_data.sh ${HADOOP_HDFS_ROOT}/raw/retail ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Make temp directories" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">. ${BENCHMARK_PATH}/exports.sh; mkdir -p ${HADOOP_SOURCE_DATA_PATH}/temp/stage ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Make HDFS directories" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">. ${BENCHMARK_PATH}/exports.sh; ${BENCHMARK_PATH}/apps/adw/hadoop/make_hdfs_directories.sh ${HADOOP_HDFS_ROOT}/raw/retail ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Create Hive tables" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">. ${BENCHMARK_PATH}/exports.sh; hive -f ${BENCHMARK_PATH}/apps/adw/hadoop/create_all_tables.hql ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Load Parameters" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ADW_FILE_SPLIT_CHUNK_SIZE" elementType="Argument">
                    <stringProp name="Argument.name">ADW_FILE_SPLIT_CHUNK_SIZE</stringProp>
                    <stringProp name="Argument.value">40000000</stringProp>
                    <stringProp name="Argument.desc">40000000</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ADW_MAX_LOADER_PROCS" elementType="Argument">
                    <stringProp name="Argument.name">ADW_MAX_LOADER_PROCS</stringProp>
                    <stringProp name="Argument.value">25</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Load small external tables" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">. ${BENCHMARK_PATH}/exports.sh; ${BENCHMARK_PATH}/apps/adw/hadoop/load_small_tables.sh ${HADOOP_SOURCE_DATA_PATH}/adw ${HADOOP_HDFS_ROOT}/raw/retail ${CL_STDERR_REDIR}  | tee -a ${BENCHMARK_OUTPUT_PATH}/load_small_tables.sh.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="HDFS put error" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1566052504">put: File .* does not exist</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Load sales transaction line external table" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">. ${BENCHMARK_PATH}/exports.sh; ${BENCHMARK_PATH}/apps/adw/hadoop/load_sales_transaction_line.sh &quot;${HADOOP_SOURCE_DATA_PATH}/adw/sales_transaction_line.csv&quot; &quot;${HADOOP_SOURCE_DATA_PATH}/temp/stage&quot; ${ADW_FILE_SPLIT_CHUNK_SIZE} ${HADOOP_HDFS_ROOT}/raw/retail ${ADW_MAX_LOADER_PROCS} ${CL_STDERR_REDIR} | tee -a ${BENCHMARK_OUTPUT_PATH}/load_sales_transaction_line.sh.${__P(BENCHMARK_RUN_ID)}.log</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Hive insert into sales_transaction" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_ADW)} ${HIVE_ADW_HQL_LOAD_SLS_TXN}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Hive insert into sales_transaction_line" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_ADW)} ${HIVE_ADW_HQL_LOAD_SLS_TXN_LINE}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate data set" enabled="true"/>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R02" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_ADW)} ${HIVE_ADW_HQL_R02}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R03" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_ADW)} ${HIVE_ADW_HQL_R03}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R04" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_ADW)} ${HIVE_ADW_HQL_R04}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R05" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_ADW)} ${HIVE_ADW_HQL_R05}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R06" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_ADW)} ${HIVE_ADW_HQL_R06}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R07" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_ADW)} ${HIVE_ADW_HQL_R07}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R08" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_ADW)} ${HIVE_ADW_HQL_R08}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R09" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${HIVE_EXEC} --hiveconf scriptPath=${BENCHMARK_PATH}/apps/adw/hadoop/npathreducer.py -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_ADW)} ${HIVE_ADW_HQL_R09}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">0</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </SizeAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Impala" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_IMPALA)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ADW Impala Queries" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IMPALA_ADW_HQL_R02" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_ADW_HQL_R02</stringProp>
                <stringProp name="Argument.value">SELECT
   UPPER(I.ITEM_NAME),
   A.PREV,
   A.COST,
   (A.PREV-A.COST) AS MARGIN
FROM (
  SELECT
     ITEM_ID,
     SUM(UNIT_SELLING_PRICE_AMT)/90 AS PREV,
     SUM(UNIT_COST_AMT)/90 AS COST
  FROM adw_sales_transaction_line2
  WHERE TRAN_DATE_P &lt; &apos;2005-06-30&apos;
    AND TRAN_DATE_P &gt;= &apos;2005-04-01&apos;
  GROUP BY (ITEM_ID)
) a
INNER JOIN adw_item I
ON A.ITEM_ID = I.ITEM_ID;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_ADW_HQL_R03" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_ADW_HQL_R03</stringProp>
                <stringProp name="Argument.value">SELECT
    I.ITEM_NAME AS PRODUCT_NAME,
    SUM(datediff(to_date(R.RETURN_TRAN_LINE_START_DTTM),
             S.TRAN_DATE_P))/COUNT(S.SALES_TRAN_ID) AS AVE_DAYS_FOR_RETURN
FROM adw_item I
JOIN adw_return_transaction_line R ON (
                I.ITEM_ID = R.RETURNED_ITEM_ID
                AND to_date(R.Return_Tran_Line_Start_Dttm) &gt;= &apos;2004-01-01&apos;
        )
        JOIN adw_sales_transaction_line2 S ON (
                trim(R.RETURNED_ITEM_ID) = trim(S.ITEM_ID)
                AND R.ORIGINAL_SALES_TRAN_ID = S.SALES_TRAN_ID
        )
WHERE I.ITEM_ID = &apos;4119689102&apos;
  AND trim(R.RETURNED_ITEM_ID) = &apos;4119689102&apos;
  AND trim(S.ITEM_ID) = &apos;4119689102&apos;
GROUP BY I.ITEM_NAME
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_ADW_HQL_R04" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_ADW_HQL_R04</stringProp>
                <stringProp name="Argument.value">SELECT
  D.DISTRICT_NAME AS DISTRICT_NAME,
  &apos;2005-04 TO 2005-06&apos; AS PERIOD,
  SUM(S.MKB_REV_AMT) AS NINETY_DAYS_REVENUE
FROM
  adw_district D
JOIN adw_location L ON (D.DISTRICT_CD = &apos;D104&apos; AND D.DISTRICT_CD = L.DISTRICT_CD)
JOIN adw_associate A ON (L.LOCATION_ID = A.LOCATION_ID)
JOIN adw_sales_transaction2 S ON (
  S.TRAN_DATE_P &gt;= &apos;2005-04-01&apos; AND S.TRAN_DATE_P &lt;=&apos;2005-06-30&apos;
  AND S.ASSOCIATE_PARTY_ID = A.ASSOCIATE_PARTY_ID
)
GROUP BY D.DISTRICT_NAME,&apos;2005-04 TO 2005-06&apos;
ORDER BY NINETY_DAYS_REVENUE DESC LIMIT 1
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_ADW_HQL_R05" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_ADW_HQL_R05</stringProp>
                <stringProp name="Argument.value">SELECT count(*)
FROM (
  SELECT count(*)
    FROM adw_sales_transaction_line2
  GROUP BY sales_tran_id
) LocalAgg
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_ADW_HQL_R06" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_ADW_HQL_R06</stringProp>
                <stringProp name="Argument.value">SELECT count(*)
FROM (
  SELECT count(*)
    FROM adw_sales_transaction_line2
   GROUP BY item_id
) GlobalAgg
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_ADW_HQL_R07" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_ADW_HQL_R07</stringProp>
                <stringProp name="Argument.value">SELECT count(*)
FROM adw_sales_transaction_line2
WHERE sales_tran_id = 197246635
;

</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_ADW_HQL_R08" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_ADW_HQL_R08</stringProp>
                <stringProp name="Argument.value">SELECT A.item_id, A.cnt FROM(
   SELECT item_id, count(*) as cnt
     FROM adw_sales_transaction_line2
   GROUP BY item_id
) A
JOIN (
  SELECT min(cnt) AS m FROM (
     SELECT item_id, count(*) as cnt
       FROM adw_sales_transaction_line2
     GROUP BY item_id) TEMP ) B
ON (A.cnt = B.m)
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_ADW_HQL_LOAD_SLS_TXN" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_ADW_HQL_LOAD_SLS_TXN</stringProp>
                <stringProp name="Argument.value">SET hive.exec.dynamic.partition.mode=nonstrict;
SET hive.exec.dynamic.partition=true;
SET mapred.child.java.opts=-Xmx2048m;
SET hive.mapred.reduce.tasks.speculative.execution=false;

INSERT OVERWRITE TABLE adw_sales_transaction2 PARTITION (TRAN_DATE_P)
  SELECT
        SALES_TRAN_ID,
        VISIT_ID,
        TRAN_STATUS_CD,
        REPORTED_AS_DTTM,
        TRAN_TYPE_CD,
        MKB_COST_AMT,
        MKB_ITEM_QTY,
        MKB_NUMERIC_UNIQUE_ITEMS_QTY,
        MKB_REV_AMT,
        ASSOCIATE_PARTY_ID,
        TRAN_START_DTTM_DD,
        TRAN_END_DTTM_DD,
        TRAN_END_HOUR,
        TRAN_END_MINUTE,
        REWARD_CD,
        TRAN_DATE as TRAN_DATE_P
  FROM ADW_sales_transaction_temp
DISTRIBUTE BY TRAN_DATE_P
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_ADW_HQL_LOAD_SLS_TXN_LINE" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_ADW_HQL_LOAD_SLS_TXN_LINE</stringProp>
                <stringProp name="Argument.value">SET hive.exec.dynamic.partition.mode=nonstrict;
SET hive.exec.dynamic.partition=true;
SET mapred.child.java.opts=-Xmx2048m;
SET hive.mapred.reduce.tasks.speculative.execution=false;

INSERT OVERWRITE TABLE adw_sales_transaction_line2 PARTITION (TRAN_DATE_P)
  SELECT
        SALES_TRAN_ID,
        SALES_TRAN_LINE_NUM,
        ITEM_ID,
        ITEM_QTY,
        UNIT_SELLING_PRICE_AMT,
        UNIT_COST_AMT,
        TRAN_LINE_STATUS_CD,
        SALES_TRAN_LINE_START_DTTM,
        TRAN_LINE_SALES_TYPE_CD,
        SALES_TRAN_LINE_END_DTTM,
        LOCATION_ID,
        TX_TIME,
        TRAN_LINE_DATE as TRAN_DATE_P
  FROM ADW_sales_transaction_line_temp
DISTRIBUTE BY TRAN_DATE_P
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_ADW_HQL_CREATE_SLS_TXN" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_ADW_HQL_CREATE_SLS_TXN</stringProp>
                <stringProp name="Argument.value">drop table adw_sales_transaction2;
CREATE TABLE IF NOT EXISTS adw_sales_transaction2 (
        SALES_TRAN_ID INT,
        VISIT_ID INT,
        TRAN_STATUS_CD STRING,
        REPORTED_AS_DTTM STRING,
        TRAN_TYPE_CD   STRING,
        MKB_COST_AMT DOUBLE,
        MKB_ITEM_QTY INT,
        MKB_NUMERIC_UNIQUE_ITEMS_QTY SMALLINT,
        MKB_REV_AMT DOUBLE,
        ASSOCIATE_PARTY_ID INT,
        TRAN_START_DTTM_DD STRING,
        TRAN_END_DTTM_DD STRING,
        TRAN_END_HOUR TINYINT,
        TRAN_END_MINUTE TINYINT,
        REWARD_CD STRING
)
PARTITIONED BY (TRAN_DATE_P STRING)
STORED AS SequenceFile
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_ADW_HQL_CREATE_SLS_TXN_LINE" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_ADW_HQL_CREATE_SLS_TXN_LINE</stringProp>
                <stringProp name="Argument.value">drop table ADW_sales_transaction_line2;
CREATE TABLE IF NOT EXISTS adw_sales_transaction_line2 (
        SALES_TRAN_ID INT,
        SALES_TRAN_LINE_NUM INT,
        ITEM_ID STRING,
        ITEM_QTY SMALLINT,
        UNIT_SELLING_PRICE_AMT FLOAT,
        UNIT_COST_AMT FLOAT,
        TRAN_LINE_STATUS_CD STRING,
        SALES_TRAN_LINE_START_DTTM STRING,
        TRAN_LINE_SALES_TYPE_CD STRING,
        SALES_TRAN_LINE_END_DTTM STRING,
        LOCATION_ID INT,
        TX_TIME STRING
)
PARTITIONED BY (TRAN_DATE_P STRING)
STORED AS SequenceFile
;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Ensure correct use of shell escapes. This is key for Hive parameter references like ${hiveconf:xyz}, which must be escaped as \${hiveconf:xyz} to keep the remote shell from resolving it before it is passed to Hive</stringProp>
          </Arguments>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Load Parameters" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ADW_FILE_SPLIT_CHUNK_SIZE" elementType="Argument">
                    <stringProp name="Argument.name">ADW_FILE_SPLIT_CHUNK_SIZE</stringProp>
                    <stringProp name="Argument.value">40000000</stringProp>
                    <stringProp name="Argument.desc">40000000</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="ADW_MAX_LOADER_PROCS" elementType="Argument">
                    <stringProp name="Argument.name">ADW_MAX_LOADER_PROCS</stringProp>
                    <stringProp name="Argument.value">25</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Hive create adw_sales_transaction2" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">hive -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_WP)} ${IMPALA_ADW_HQL_CREATE_SLS_TXN}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="HDFS put error" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1566052504">put: File .* does not exist</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Hive create adw_sales_transaction_line2" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">hive -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_WP)} ${IMPALA_ADW_HQL_CREATE_SLS_TXN_LINE}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Hive insert into adw_sales_transaction2" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">hive -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_WP)} ${IMPALA_ADW_HQL_LOAD_SLS_TXN}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R00: Hive insert into adw_sales_transaction_line2" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">hive -e &quot;${__P(EXEC_HADOOP_COMPRESS_PROPS_WP)} ${IMPALA_ADW_HQL_LOAD_SLS_TXN_LINE}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate data set" enabled="true"/>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R02" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_ADW_HQL_R02}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R03" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_ADW_HQL_R03}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R04" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_ADW_HQL_R04}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R05" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_ADW_HQL_R05}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R06" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_ADW_HQL_R05}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R07" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_ADW_HQL_R07}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Random;
import org.apache.jmeter.util.JMeterUtils;

Random rand = new Random();
String[] IMPALAD = {&quot;datanode1&quot;,&quot;datanode2&quot; ,&quot;datanode3&quot; , &quot;datanode4&quot;,&quot;datanode5&quot; ,&quot;datanode6&quot;} ;

JMeterUtils.setProperty(&quot;IMPALAD_HOST&quot;, IMPALAD[rand.nextInt(6)]);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="R08" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q &quot;${IMPALA_ADW_HQL_R08}&quot; ${CL_STDERR_REDIR}</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Response size &gt; 0 bytes" enabled="true">
                <stringProp name="Assertion.test_field">SizeAssertion.response_data</stringProp>
                <stringProp name="SizeAssertion.size">0</stringProp>
                <intProp name="SizeAssertion.operator">3</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </SizeAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Runtime error" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1448289896">${HADOOP_RESPONSE_ERROR_REGEX}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="ADW UDVs" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="HIVE_WP_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">HIVE_WP_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${HIVE_EXEC} -e</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="IMPALA_WP_CL_PREFIX" elementType="Argument">
                <stringProp name="Argument.name">IMPALA_WP_CL_PREFIX</stringProp>
                <stringProp name="Argument.value">${IMPALA_EXEC} -i ${__P(IMPALAD_HOST)} -q</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ETL1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(BMS_ETL1_LOOP_COUNT)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(BMS_USER_COUNT)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(BMS_RAMP_UP_SEC)}</stringProp>
        <longProp name="ThreadGroup.start_time">1318848428000</longProp>
        <longProp name="ThreadGroup.end_time">1318848428000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Teradata/Hadoop ETL benchmark (Q1 2014)</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Teradata" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_TERADATA)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="ETL1_00: Run initialization load" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/tpcds/teradata/ingest/import_initial.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="ETL1_00: Validate initialization load" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/tpcds/teradata/ingest/validate_initial.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1551073116">@@@OK@@@</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="ETL1_00: Import batch" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/tpcds/teradata/ingest/import_data_batch.sh -b 1 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="ETL1_00: Validate batch" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/tpcds/teradata/ingest/validate_batch.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="ETL1_00: Update customer" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/tpcds/teradata/transform/update_customer.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="ETL1_00: Update store" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/tpcds/teradata/transform/update_store.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="ETL1_00: Update store sales" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/tpcds/teradata/transform/update_store_sales.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="ETL1_00: Validate update" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/tpcds/teradata/transform/validate_update.sh 2&gt;&amp;1</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="ETL1_01: Run Q1" enabled="true">
              <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
              <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
              <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
              <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
              <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/tpcds/teradata/run_sql.sh Q01 2&gt;&amp;1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="ETL1_02: Run Q2" enabled="true">
              <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
              <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
              <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
              <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
              <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/tpcds/teradata/run_sql.sh Q02 2&gt;&amp;1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree/>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="ETL1_03: Run Q3" enabled="true">
              <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
              <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
              <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
              <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
              <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/tpcds/teradata/run_sql.sh Q03 2&gt;&amp;1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Hadoop" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_HADOOP)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_CREATE)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FMTS (Hadoop storage formats)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(BMS_FMTS_LOOP_COUNT)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(BMS_USER_COUNT)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__(BMS_RAMP_UP_SEC)}</stringProp>
        <longProp name="ThreadGroup.start_time">1318848428000</longProp>
        <longProp name="ThreadGroup.end_time">1318848428000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Hadoop formats benchmark (February 2014)</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Hadoop" enabled="true">
          <stringProp name="IfController.condition">${__P(BMS_EXEC_PLATFORM_HADOOP)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Load" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_LOAD)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Run Once (tencol/fiftycol)" enabled="false"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS00: Create schema" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/create_schema.sh</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS00: Insert into TENCOL_RC" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/insert_tencol_rc.sh</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS00: Insert into FIFTYCOL_RC" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/insert_fiftycol_rc.sh</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS00: Insert into RC @ 50col x 5B row, 5 partitions" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/insert_rc_50col_5Brow_5part.sh</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS00: Insert into ORC @ 50col x 5B row, 5 partitions" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/insert_orc_50col_5Brow_5part.sh</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS00: Insert into Avro @ 50col x 5B row, 5 partitions" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/insert_avro_50col_5Brow_5part.sh</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS00: Insert into TextFile @ 50col x 5B row, 5 partitions" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/insert_text_50col_5Brow_5part.sh</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Run Once (HDFS, Hive external ingest)" enabled="false"/>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS00: Load files into HDFS" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/load_hdfs.sh</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="BMS_FMTS_RUN_5B_INDEXED=true?" enabled="true">
              <stringProp name="IfController.condition">${__P(BMS_FMTS_RUN_5B_INDEXED)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Run once: Load tables for optimized indexing test" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS00: Insert into ORC @ 50col x 5B row, 5 partitions" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/insert_orc_50col_5Brow_5part_indexed.sh</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS00: Add indexes to ORC @ 50col x 5B row, 5 partitions" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/add_indexes_orc_50col_5Brow_5part.sh</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Query" enabled="true">
            <stringProp name="IfController.condition">${__P(BMS_EXEC_MODE_QUERY)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="BMS_FMTS_RUN_1B=true?" enabled="true">
              <stringProp name="IfController.condition">${__P(BMS_FMTS_RUN_1B)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS01 " enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q1B-01</stringProp>
                <stringProp name="TestPlan.comments">SELECT  COUNT(*) 
FROM fiftycol_orc_1b
;</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS02" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q1B-02</stringProp>
                <stringProp name="TestPlan.comments">SELECT  * 
FROM (
SELECT  c20, c11, min_c1, max_c1, sum_c8 
FROM (
SELECT  MIN(c1) AS min_c1, MAX(c1) AS max_c1, SUM(c8) AS sum_c8,
        c11, c20 
FROM fiftycol_orc_1b 
WHERE  c1 &gt;= 0 
GROUP   BY c11, c20) a
sort BY max_c1 DESC LIMIT 10) b
ORDER   BY max_c1 DESC LIMIT 10;</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS03" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q1B-03</stringProp>
                <stringProp name="TestPlan.comments">SELECT  * 
FROM (
SELECT  c20, c1_min, COUNT(*) AS cnt 
FROM (
SELECT  SUM(c1) c1_sum, MIN(c1) c1_min, MAX(c1) max_c1, AVG(c1) avg_c1,
        c2, c15, c18, c20, c30, c44, c49 
FROM fiftycol_orc_1b 
WHERE  c20 &gt;= &apos;2013-01-01&apos; 
    AND  c1 &gt;= 1 
    AND  c11 &gt;= 2 
GROUP   BY c2, c15, c18, c20, c30, c44, c49) a
GROUP   BY c20, c1_min) b
WHERE  cnt &gt; 1 LIMIT 20;</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS04" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q1B-04</stringProp>
                <stringProp name="TestPlan.comments">SELECT  c1, c2, c3, c10, c15, c16, c19, c24, c28, c30, c34, c35,
        c40, c44, c49
FROM fiftycol_orc_1b
WHERE  c1 = 306582004;
</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
              <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS05" enabled="true">
                <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q1B-05</stringProp>
                <stringProp name="TestPlan.comments">SELECT  * 
FROM fiftycol_orc_1b
WHERE c1 = 306582004;
</stringProp>
              </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="BMS_FMTS_RUN_5B=true?" enabled="true">
              <stringProp name="IfController.condition">${__P(BMS_FMTS_RUN_5B)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RC" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS06" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/formats/hadoop/run_hql.sh Q5B-RC-01</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS07" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-RC-02</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS08" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-RC-03</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS09" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-RC-04</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS10" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-RC-05</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ORC" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS11" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-ORC-01</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS12" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-ORC-02</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS13" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-ORC-03</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS14" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-ORC-04</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS15" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-ORC-05</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Avro" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS16" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-Avro-01</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS17" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-Avro-02</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS18" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-Avro-03</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS19" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-Avro-04</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS20" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-Avro-05</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TextFile" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS21" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${__P(BENCHMARK_PATH)}/apps/formats/hadoop/run_hql.sh Q5B-Text-01</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS22" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-Text-02</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS23" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-Text-03</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS24" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-Text-04</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS25" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-Text-05</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="BMS_FMTS_RUN_5B_INDEXED=true?" enabled="true">
              <stringProp name="IfController.condition">${__P(BMS_FMTS_RUN_5B_INDEXED)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ORC" enabled="true"/>
              <hashTree>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS16" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-ORC-optimized-01 -optimized</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS17" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-ORC-optimized-02 -optimized</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS18" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-ORC-optimized-03 -optimized</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS19" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-ORC-optimized-04 -optimized</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
                <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="FMTS20" enabled="true">
                  <stringProp name="hostname">${__P(BMS_TARGET_HOST)}</stringProp>
                  <stringProp name="port">${__P(BMS_TARGET_SSH_PORT)}</stringProp>
                  <stringProp name="username">${__P(BMS_TARGET_UID)}</stringProp>
                  <stringProp name="password">${__P(BMS_TARGET_PWD)}</stringProp>
                  <stringProp name="command">${BENCHMARK_PATH}/apps/formats/hadoop/run_hql.sh Q5B-ORC-optimized-05 -optimized</stringProp>
                </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename">${__P(BMS_OUTPUT_PATH)}/bms-${__P(BENCHMARK_RUN_ID)}-ALL.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename">${__P(BMS_OUTPUT_PATH)}/bms-${__P(BENCHMARK_RUN_ID)}-ALL.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="=== Assertion Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
